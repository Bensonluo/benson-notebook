{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main notebook","text":""},{"location":"#reading-list","title":"Reading List","text":"\u4e66\u540d \u76ee\u524d\u4f18\u5148\u7ea7 \u72b6\u6001 \u9605\u8bfb\u8fdb\u5ea6 Designing Data-Intensive Application 1 In Reading 263/515 \u8ba1\u7b97\u673a\u7f51\u7edc A top-down Approcach OnHold 152/510 Kubernetes \u5373\u5b66\u5373\u7528 Main points 80/218 \u5206\u5e03\u5f0f\u7cfb\u7edf-\u5e38\u7528\u6280\u672f\u53ca\u6848\u4f8b\u5206\u6790 - JAVA OnHold 102/540 \u4f01\u4e1a\u7ea7\u5927\u6570\u636e\u5e73\u53f0\u6784\u5efa-\u67b6\u6784\u4e0e\u5b9e\u73b0 2 OnHold 0/249 \u8bbe\u8ba1\u6a21\u5f0f-Reusable O-O Software OnHold 206/290 The Go Programing language Main points 275/374 Go \u8bed\u8a00\u9ad8\u5e76\u53d1\u548c\u5fae\u670d\u52a1\u5b9e\u6218 Main points 320/390 Linux/UNIX \u7f16\u7a0b\u624b\u518c OnHold 120/1176 \u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf Main points 435/733 \u5251\u6307offer Main points 266/333 Go\u8bed\u8a00\u5b9e\u6218 OnHold 125/246 Effective Python Completed 213/213 \u8d85\u5927\u6d41\u91cf\u5206\u5e03\u5f0f\u7cfb\u7edf\u67b6\u6784\u89e3\u51b3\u65b9\u6848 Completed 220/220 Effective Go Completed 114/114 \u673a\u5668\u5b66\u4e60\u5e94\u7528\u7cfb\u7edf\u8bbe\u8ba1 Completed 241/241 Spring Boot in Action 999 Blocked 0% Spring Microservice in Action 999 Blocked 0 Spring in Action 999 Blocked 0/464"},{"location":"#leetcode-progress","title":"LeetCode Progress","text":"<p>My Leetcode account</p> Problem Solved : 215 \u7b80\u5355 125 \u4e2d\u7b49 85 \u56f0\u96be 5 \u603b\u63d0\u4ea4\u6570 477"},{"location":"#go","title":"GO\u7535\u5546\u7f51\u7ad9\u9ad8\u5e76\u53d1\u79d2\u6740\u9879\u76ee\u5b9e\u8df5","text":"<p>\u4e0d\u65ad\u66f4\u65b0\u4e2d</p> <p>\u70b9\u51fb\u6807\u9898\u8df3\u8f6c</p>"},{"location":"#go-devops","title":"GO\u7535\u5546\u5fae\u670d\u52a1\u5bb9\u5668\u5316\u9879\u76ee\u5f00\u53d1\u8fd0\u7ef4\u5b9e\u8df5-DevOps","text":"<p>\u4e0d\u65ad\u66f4\u65b0\u4e2d</p> <p>\u70b9\u51fb\u6807\u9898\u8df3\u8f6c</p>"},{"location":"#data-structure-and-algorithm","title":"Data structure and Algorithm","text":"<p>\u70b9\u51fb\u6807\u9898\u8df3\u8f6c</p>"},{"location":"#_1","title":"\u5404\u6570\u636e\u7ed3\u6784\u65f6\u95f4\u590d\u6742\u5ea6","text":"\u6570\u636e\u7ed3\u6784 \u63d2\u5165 \u5220\u9664 \u67e5\u627e \u6570\u7ec4 o(n) o(1) o(n) \u6709\u5e8f\u6570\u7ec4 o(logn) o(n) o(n) \u94fe\u8868 o(n) o(1) o(n) \u6709\u5e8f\u94fe\u8868 o(n) o(n) o(n) \u4e8c\u53c9\u6811\u6700\u574f o(n) o(n) o(n) \u4e8c\u53c9\u6811\u4e00\u822c o(logn) o(logn) o(logn) \u5e73\u8861\u6811AVL o(logn) o(logn) o(logn) \u54c8\u5e0c\u8868 o(1) o(1) o(1) \u53cc\u5411\u94fe\u8868 O(n) O(1) O(1)"},{"location":"#_2","title":"\u4e3b\u8981\u6392\u5e8f\u7b97\u6cd5\u7684\u6548\u7387","text":"\u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747\u65f6\u95f4 \u6700\u574f\u65f6\u95f4 \u7a7a\u95f4 \u7a33\u5b9a\u6027 \u6ce8\u91ca \u5192\u6ce1 o(n^2) o(n^2) o(1) \u7a33\u5b9a \u9009\u62e9 o(n^2) o(n^2) o(1) \u4e0d\u7a33\u5b9a \u63d2\u5165 o(n^2) o(n^2) o(1) \u7a33\u5b9a \u5feb\u901f o(n log n) o(n^2) o(log n) \u4e0d\u7a33\u5b9a \u5f52\u5e76 o(n log n) o(n log n) o(n) \u7a33\u5b9a"},{"location":"#golang","title":"Golang \u57fa\u7840","text":"<p>\u70b9\u51fb\u6807\u9898\u8df3\u8f6c</p>"},{"location":"#database","title":"Database","text":"\u7279\u6027 InnoDB MyISAM MEMORY \u4e8b\u7269\u5b89\u5168 \u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u5bf9\u5916\u952e\u7684\u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u5b58\u50a8\u9650\u5236 64T \u6709 \u6709 \u7a7a\u95f4\u4f7f\u7528 \u9ad8 \u4f4e \u4f4e \u5185\u5b58\u4f7f\u7528 \u9ad8 \u4f4e \u9ad8 \u63d2\u5165\u6570\u636e\u7684\u901f\u5ea6 \u4f4e \u9ad8 \u9ad8 <p>InnoDB\u662fMysql\u7684\u9ed8\u8ba4\u5b58\u50a8\u5f15\u64ce(5.5.5\u4e4b\u524d\u662fMyISAM\uff09</p> <p>\u5f53\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u4e8b\u52a1\u65f6\u5019\uff0cInnoDb\u662f\u9996\u9009</p> <p>\u7531\u4e8e\u9501\u7684\u7c92\u5ea6\u5c0f\uff0c\u5199\u64cd\u4f5c\u4e0d\u4f1a\u9501\u5b9a\u5168\u8868\u3002\u6240\u4ee5\u5728\u5e76\u53d1\u5ea6\u8f83\u9ad8\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u4f1a\u63d0\u5347\u6548\u7387\u7684\u3002</p> <p>\u5927\u6279\u91cf\u7684\u63d2\u5165\u8bed\u53e5\u65f6\uff08INSERT\u8bed\u53e5\uff09\u5728MyIASM\u5f15\u64ce\u4e2d\u6267\u884c\u7684\u6bd4\u8f83\u7684\u5feb\uff0c\u4f46\u662fUPDATE\u8bed\u53e5\u5728Innodb\u4e0b\u6267\u884c\u7684\u4f1a\u6bd4\u8f83\u7684\u5feb\uff0c\u5c24\u5176\u662f\u5728\u5e76\u53d1\u91cf\u5927\u7684\u65f6\u5019\u3002</p>"},{"location":"#_3","title":"\u7d22\u5f15\uff1a","text":"<p>\u7d22\u5f15\u5931\u6548\u7684\u60c5\u51b5\uff1f</p> <ul> <li> <p>\u4ee5%\u5f00\u5934\u7684like\u67e5\u8be2\u4e0d\u80fd\u4f7f\u7528B-Tree\u7d22\u5f15\u3002</p> </li> <li> <p>\u9690\u5f0f\u8f6c\u6362\u65f6\uff0c\u5f53\u5217\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\u65f6\u5019\uff0c\u8981\u662fwhere\u67e5\u8be2\u65f6\u5019\u6ca1\u6709\u5f15\u8d77\u6765\uff0c\u5c31\u4e5f\u4e0d\u4f1a\u8d70\u7d22\u5f15\u3002</p> </li> <li> <p>\u590d\u5408\u7d22\u5f15\u60c5\u51b5\u4e0b\u4e0d\u6ee1\u8db3\u6700\u5de6\u539f\u5219Leftmost, \u4e5f\u4e0d\u4f1a\u4f7f\u7528\u590d\u5408\u7d22\u5f15\u3002</p> </li> <li> <p>\u5982\u679cMySQL\u4f30\u8ba1\u4f7f\u7528\u7d22\u5f15\u6bd4\u5168\u8868\u626b\u63cf\u66f4\u6162\uff0c\u5219\u4e0d\u4f7f\u7528\u7d22\u5f15\u3002</p> </li> <li> <p>\u4ee5or\u5206\u5272\u5f00\u7684\u6761\u4ef6\uff0c\u5982\u679cor\u524d\u7684\u6761\u4ef6\u5217\u4e2d\u6709\u7d22\u5f15\uff0c\u800c\u540e\u9762\u7684\u5217\u4e2d\u6ca1\u6709\u7d22\u5f15\uff0c\u90a3\u4e48\u6d89\u53ca\u7684\u7d22\u5f15\u90fd\u4e0d\u4f1a\u88ab\u7528\u5230\u3002\u56e0\u4e3aor\u540e\u9762\u7684\u6761\u4ef6\u5217\u4e2d\u6ca1\u6709\u7d22\u5f15\uff0c\u90a3\u4e48\u540e\u9762\u7684\u67e5\u8be2\u80af\u5b9a\u8981\u8d70\u5168\u8868\u626b\u63cf\uff0c\u5728\u5b58\u5728\u5168\u8868\u626b\u63cf\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u591a\u4e00\u6b21\u7d22\u5f15\u626b\u63cf\u589e\u52a0I/O\u8bbf\u95ee\uff0c\u4e00\u6b21\u5168\u8868\u626b\u63cf\u8fc7\u6ee4\u6761\u4ef6\u5c31\u8db3\u591f\u4e86\u3002</p> </li> </ul> <p>\u4e3a\u4ec0\u4e48\u4f7f\u7528MySQL\u7684\u6700\u5de6\u5339\u914d\u539f\u5219\uff0c\u4e0d\u80fd\u662f\u4e2d\u95f4\u5339\u914d\uff0c\u6700\u53f3\u5339\u914d\uff1f</p> <p>\u6700\u5de6\u5339\u914d\u539f\u5219\uff1a\u6700\u5de6\u4f18\u5148\uff0c\u4ee5\u6700\u5de6\u8fb9\u7684\u4e3a\u8d77\u70b9\u4efb\u4f55\u8fde\u7eed\u7684\u7d22\u5f15\u90fd\u80fd\u5339\u914d\u4e0a\u3002\u540c\u65f6\u9047\u5230\u8303\u56f4\u67e5\u8be2(&gt;\u3001&lt;\u3001between\u3001like)\u5c31\u4f1a\u505c\u6b62\u5339\u914d\u3002</p> <p>\u6bd4\u5982a\uff0cb\u5efa\u7acb\u7d22\u5f15\u65f6\u5019\uff0c\u662f\u5148\u4ee5a\u5efa\u7acb\u7684\u7d22\u5f15\uff0c\u6b64\u65f6b\u662f\u65e0\u5e8f\u7684\uff0c\u5728\u4ee5a\u5efa\u7acb\u4e4b\u540e\u7684a\u7684\u5b50\u6811\u4e0a\u518d\u5efa\u7acbb\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6574\u9897b+\u6811\u6765\u8bf4\uff0ca\u662f\u4e00\u5b9a\u6709\u5e8f\u7684\uff0cb\u662f\u4e0d\u4e00\u5b9a\u6709\u5e8f\u7684\u3002</p> <p>\u5f53b+\u6811\u7684\u6570\u636e\u9879\u662f\u590d\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982(name,age,sex)\u7684\u65f6\u5019\uff0cb+\u6570\u662f\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6765\u5efa\u7acb\u641c\u7d22\u6811\u7684\uff0c\u6bd4\u5982\u5f53(\u5f20\u4e09,20,M)\u8fd9\u6837\u7684\u6570\u636e\u6765\u68c0\u7d22\u7684\u65f6\u5019\uff0cb+\u6811\u4f1a\u4f18\u5148\u6bd4\u8f83name\u6765\u786e\u5b9a\u4e0b\u4e00\u6b65\u7684\u6240\u641c\u65b9\u5411\uff0c\u5982\u679cname\u76f8\u540c\u518d\u4f9d\u6b21\u6bd4\u8f83age\u548csex\uff0c\u6700\u540e\u5f97\u5230\u68c0\u7d22\u7684\u6570\u636e\uff1b\u4f46\u5f53(20,M)\u8fd9\u6837\u7684\u6ca1\u6709name\u7684\u6570\u636e\u6765\u7684\u65f6\u5019\uff0cb+\u6811\u5c31\u4e0d\u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u67e5\u54ea\u4e2a\u8282\u70b9\uff0c\u56e0\u4e3a\u5efa\u7acb\u641c\u7d22\u6811\u7684\u65f6\u5019name\u5c31\u662f\u7b2c\u4e00\u4e2a\u6bd4\u8f83\u56e0\u5b50\uff0c\u5fc5\u987b\u8981\u5148\u6839\u636ename\u6765\u641c\u7d22\u624d\u80fd\u77e5\u9053\u4e0b\u4e00\u6b65\u53bb\u54ea\u91cc\u67e5\u8be2\u3002\u6bd4\u5982\u5f53(\u5f20\u4e09,M)\u8fd9\u6837\u7684\u6570\u636e\u6765\u68c0\u7d22\u65f6\uff0cb+\u6811\u53ef\u4ee5\u7528name\u6765\u6307\u5b9a\u641c\u7d22\u65b9\u5411\uff0c\u4f46\u4e0b\u4e00\u4e2a\u5b57\u6bb5age\u7684\u7f3a\u5931\uff0c\u6240\u4ee5\u53ea\u80fd\u628a\u540d\u5b57\u7b49\u4e8e\u5f20\u4e09\u7684\u6570\u636e\u90fd\u627e\u5230\uff0c\u7136\u540e\u518d\u5339\u914d\u6027\u522b\u662fM\u7684\u6570\u636e\u4e86\uff0c \u8fd9\u4e2a\u662f\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5373\u7d22\u5f15\u7684\u6700\u5de6\u5339\u914d\u7279\u6027\u3002</p>"},{"location":"#redis","title":"Redis","text":"<p>Redis\u7684\u6570\u636e\u7c7b\u578b\uff1a </p> <ul> <li>String \u6574\u6570\uff0c\u6d6e\u70b9\u6570\u6216\u8005\u5b57\u7b26\u4e32</li> <li>Set \u96c6\u5408</li> <li>Zset \u6709\u5e8f\u96c6\u5408</li> <li>Hash \u6563\u5217\u8868</li> <li>List \u5217\u8868</li> </ul> <p>Redis \u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5feb? - \u6570\u636e\u7ed3\u6784\u7b80\u5355\uff0c\u64cd\u4f5c\u7701\u65f6 - \u8dd1\u5728\u5185\u5b58\u4e0a - \u591a\u8def\u590d\u7528io\u975e\u963b\u585e   (\u5c3d\u91cf\u51cf\u5c11\u7f51\u7edc IO \u7684\u65f6\u95f4\u6d88\u8017\uff09</p> <p>\u975e\u963b\u585e IO \u5185\u90e8\u5b9e\u73b0\u91c7\u7528 epoll\uff0c\u91c7\u7528\u4e86 epoll+\u81ea\u5df1\u5b9e\u73b0\u7684\u7b80\u5355\u7684\u4e8b\u4ef6\u6846\u67b6\u3002epoll \u4e2d\u7684\u8bfb\u3001\u5199\u3001\u5173\u95ed\u3001\u8fde\u63a5\u90fd\u8f6c\u5316\u6210\u4e86\u4e8b\u4ef6\uff0c\u7136\u540e\u5229\u7528 epoll \u7684\u591a\u8def\u590d\u7528\u7279\u6027\uff0c\u7edd\u4e0d\u5728 io \u4e0a\u6d6a\u8d39\u4e00\u70b9\u65f6\u95f4\u3002</p> <ul> <li>\u5355\u7ebf\u7a0b\u4fdd\u8bc1\u4e86\u7cfb\u7edf\u6ca1\u6709\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362</li> </ul> <p>\u4f7f\u7528\u5355\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u548c\u7ade\u4e89\u6761\u4ef6\uff0c\u6ca1\u6709\u591a\u8fdb\u7a0b\u6216\u591a\u7ebf\u7a0b\u5f15\u8d77\u7684\u5207\u6362\u548c CPU \u7684\u6d88\u8017\uff0c\u4e0d\u5fc5\u8003\u8651\u5404\u79cd\u9501\u7684\u95ee\u9898\uff0c\u6ca1\u6709\u9501\u91ca\u653e\u6216\u9501\u5b9a\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u56e0\u6b7b\u9501\u800c\u964d\u4f4e\u6027\u80fd\uff1b</p> <p>\u5e38\u7528\u7684\u4f7f\u7528\u573a\u666f\uff1a - \u7f13\u5b58\uff1a\u63d0\u5347\u670d\u52a1\u5668\u6027\u80fd\u65b9\u9762\u975e\u5e38\u6709\u6548 - \u6392\u884c\u699c\uff0c\u5229\u7528Redis\u7684SortSet(\u6709\u5e8f\u96c6\u5408)\u6570\u636e\u7ed3\u6784\u80fd\u591f\u7b80\u5355\u7684\u641e\u5b9a - \u8ba1\u7b97\u5668/\u9650\u901f\u5668\uff1a\u5229\u7528Redis\u539f\u5b50\u6027\u7684\u81ea\u589e\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u7c7b\u4f3c\u7528\u6237\u70b9\u8d5e\u6570\u3001\u7528\u6237\u8bbf\u95ee\u6570\u7b49\uff0c\u8fd9\u7c7b\u64cd\u4f5c\u5982\u679c\u7528MySQL\uff0c\u9891\u7e41\u7684\u8bfb\u5199\u4f1a\u5e26\u6765\u76f8\u5f53\u5927\u7684\u538b\u529b; \u9650\u901f\u5668\u6bd4\u8f83\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u662f\u9650\u5236\u67d0\u4e2a\u7528\u6237\u8bbf\u95ee\u67d0\u4e2aAPI\u7684\u9891\u7387\uff0c\u5e38\u7528\u7684\u6709\u79d2\u6740\u65f6\uff0c\u9632\u6b62\u7528\u6237\u75af\u72c2\u70b9\u51fb\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u538b\u529b; - \u7b80\u5355\u6d88\u606f\u961f\u5217: \u9664\u4e86Redis\u81ea\u8eab\u7684\u53d1\u5e03/\u8ba2\u9605\u6a21\u5f0f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528List\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u673a\u5236\uff0c\u6bd4\u5982\uff1a\u5230\u8d27\u901a\u77e5\u3001\u90ae\u4ef6\u53d1\u9001\u4e4b\u7c7b\u7684\u9700\u6c42\uff0c\u4e0d\u9700\u8981\u9ad8\u53ef\u9760\uff0c\u4f46\u662f\u4f1a\u5e26\u6765\u975e\u5e38\u5927\u7684DB\u538b\u529b\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528List\u6765\u5b8c\u6210\u5f02\u6b65\u89e3\u8026\uff1b - Session\u5171\u4eab: \u4ee5PHP\u4e3a\u4f8b\uff0c\u9ed8\u8ba4Session\u662f\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u7684\u6587\u4ef6\u4e2d\uff0c\u5982\u679c\u662f\u96c6\u7fa4\u670d\u52a1\uff0c\u540c\u4e00\u4e2a\u7528\u6237\u8fc7\u6765\u53ef\u80fd\u843d\u5728\u4e0d\u540c\u673a\u5668\u4e0a\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u7528\u6237\u9891\u7e41\u767b\u9646\uff1b\u91c7\u7528Redis\u4fdd\u5b58Session\u540e\uff0c\u65e0\u8bba\u7528\u6237\u843d\u5728\u90a3\u53f0\u673a\u5668\u4e0a\u90fd\u80fd\u591f\u83b7\u53d6\u5230\u5bf9\u5e94\u7684Session\u4fe1\u606f\u3002</p> <ul> <li>\u4e00\u4e9b\u9891\u7e41\u88ab\u8bbf\u95ee\u7684\u6570\u636e: \u7ecf\u5e38\u88ab\u8bbf\u95ee\u7684\u6570\u636e\u5982\u679c\u653e\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u6bcf\u6b21\u67e5\u8be2\u7684\u5f00\u9500\u90fd\u4f1a\u5f88\u5927\uff0c\u800c\u653e\u5728redis\u4e2d\uff0c\u56e0\u4e3aredis\u662f\u653e\u5728\u5185\u5b58\u4e2d\u7684\u53ef\u4ee5\u5f88\u9ad8\u6548\u7684\u8bbf\u95ee</li> </ul> <p>Redis\u7684Master-slave \u6a21\u5f0f</p> <p>\u94fe\u63a5\u8fc7\u7a0b\uff1a </p> <ol> <li>\u4e3b\u670d\u52a1\u5668\u521b\u5efa\u5feb\u7167\u6587\u4ef6\uff0c\u53d1\u9001\u7ed9\u4ece\u670d\u52a1\u5668\uff0c\u5e76\u5728\u53d1\u9001\u671f\u95f4\u4f7f\u7528\u7f13\u51b2\u533a\u8bb0\u5f55\u6267\u884c\u7684\u5199\u547d\u4ee4\u3002\u5feb\u7167\u6587\u4ef6\u53d1\u9001\u5b8c\u6bd5\u4e4b\u540e\uff0c\u5f00\u59cb\u5411\u4ece\u670d\u52a1\u5668\u53d1\u9001\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\u7684\u5199\u547d\u4ee4\uff1b</li> <li>\u4ece\u670d\u52a1\u5668\u4e22\u5f03\u6240\u6709\u65e7\u6570\u636e\uff0c\u8f7d\u5165\u4e3b\u670d\u52a1\u5668\u53d1\u6765\u7684\u5feb\u7167\u6587\u4ef6\uff0c\u4e4b\u540e\u4ece\u670d\u52a1\u5668\u5f00\u59cb\u63a5\u53d7\u4e3b\u670d\u52a1\u5668\u53d1\u6765\u7684\u5199\u547d\u4ee4\uff1b</li> <li>\u4e3b\u670d\u52a1\u5668\u6bcf\u6267\u884c\u4e00\u6b21\u5199\u547d\u4ee4\uff0c\u5c31\u5411\u4ece\u670d\u52a1\u5668\u53d1\u9001\u76f8\u540c\u7684\u5199\u547d\u4ee4\u3002</li> </ol> <p>\u4e3b\u4ece\u94fe\uff1a</p> <p>\u968f\u7740\u8d1f\u8f7d\u4e0d\u65ad\u4e0a\u5347\uff0c\u4e3b\u670d\u52a1\u5668\u53ef\u80fd\u65e0\u6cd5\u5f88\u5feb\u5730\u66f4\u65b0\u6240\u6709\u4ece\u670d\u52a1\u5668\uff0c\u6216\u8005\u91cd\u65b0\u8fde\u63a5\u548c\u91cd\u65b0\u540c\u6b65\u4ece\u670d\u52a1\u5668\u5c06\u5bfc\u81f4\u7cfb\u7edf\u8d85\u8f7d\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e2d\u95f4\u5c42\u6765\u5206\u62c5\u4e3b\u670d\u52a1\u5668\u7684\u590d\u5236\u5de5\u4f5c\u3002\u4e2d\u95f4\u5c42\u7684\u670d\u52a1\u5668\u662f\u6700\u4e0a\u5c42\u670d\u52a1\u5668\u7684\u4ece\u670d\u52a1\u5668\uff0c\u53c8\u662f\u6700\u4e0b\u5c42\u670d\u52a1\u5668\u7684\u4e3b\u670d\u52a1\u5668\u3002</p> <p>Sentinel\uff08\u54e8\u5175) \u53ef\u4ee5\u76d1\u542c\u96c6\u7fa4\u4e2d\u7684\u670d\u52a1\u5668\uff0c\u5e76\u5728\u4e3b\u670d\u52a1\u5668\u8fdb\u5165\u4e0b\u7ebf\u72b6\u6001\u65f6\uff0c\u81ea\u52a8\u4ece\u4ece\u670d\u52a1\u5668\u4e2d\u9009\u4e3e\u51fa\u65b0\u7684\u4e3b\u670d\u52a1\u5668\u3002</p> <p>\u5206\u5e03\u5f0f\u9501</p> <p>\u5206\u5e03\u5f0f\u9501\u4e00\u822c\u6709\u5982\u4e0b\u7684\u7279\u70b9\uff1a</p> <ul> <li>\u4e92\u65a5\u6027\uff1a \u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6301\u6709\u9501</li> <li>\u53ef\u91cd\u5165\u6027\uff1a \u540c\u4e00\u8282\u70b9\u4e0a\u7684\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5982\u679c\u83b7\u53d6\u4e86\u9501\u4e4b\u540e\u80fd\u591f\u518d\u6b21\u83b7\u53d6\u9501</li> <li>\u9501\u8d85\u65f6\uff1a\u548cJ.U.C\u4e2d\u7684\u9501\u4e00\u6837\u652f\u6301\u9501\u8d85\u65f6\uff0c\u9632\u6b62\u6b7b\u9501</li> <li>\u9ad8\u6027\u80fd\u548c\u9ad8\u53ef\u7528\uff1a \u52a0\u9501\u548c\u89e3\u9501\u9700\u8981\u9ad8\u6548\uff0c\u540c\u65f6\u4e5f\u9700\u8981\u4fdd\u8bc1\u9ad8\u53ef\u7528\uff0c\u9632\u6b62\u5206\u5e03\u5f0f\u9501\u5931\u6548</li> <li>\u5177\u5907\u963b\u585e\u548c\u975e\u963b\u585e\u6027\uff1a\u80fd\u591f\u53ca\u65f6\u4ece\u963b\u585e\u72b6\u6001\u4e2d\u88ab\u5524\u9192</li> </ul> <p>\u6211\u4eec\u4e00\u822c\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u5b9e\u73b0\u5206\u5e03\u5f0f\u9501\uff1a</p> <ul> <li>\u57fa\u4e8e\u6570\u636e\u5e93</li> <li>\u57fa\u4e8eRedis</li> <li>\u57fa\u4e8ezookeeper</li> </ul> <p>cluster\u600e\u4e48\u4fdd\u8bc1\u952e\u7684\u5747\u5300\u5206\u914d\uff1f\u4e3a\u4ec0\u4e48\u7528Crc16\u7b97\u6cd5\uff0c\u548cMD5\u7684\u533a\u522b\uff1f</p> <p>Redis Cluser\u91c7\u7528\u865a\u62df\u69fd\u5206\u533a\uff0c\u6240\u6709\u7684\u952e\u6839\u636e\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u52300~16383\u4e2a\u6574\u6570\u69fd\u5185\uff0c\u8ba1\u7b97\u516c\u5f0f\uff1aslot=CRC16\uff08key\uff09&amp;16383\u3002</p> <p>CRC  \u7684\u4fe1\u606f\u5b57\u6bb5\u548c\u6821\u9a8c\u5b57\u6bb5\u7684\u957f\u5ea6\u53ef\u4ee5\u9009\u5b9a\u3002</p> <p>Redis \u91c7\u7528\u7684\u662f\u57fa\u4e8e\u5b57\u8282\u67e5\u8868\u6cd5\u7684CRC\u6821\u9a8c\u7801\u751f\u6210\u7b97\u6cd5\uff0c\u8ba1\u7b97\u6548\u7387\u548c\u901f\u5ea6\u6bd4MD5\u5feb\uff0c\u4e14\u53d6\u5f97\u4e86\u901f\u5ea6\u548c\u7a7a\u95f4\u5360\u7528\u7684\u5e73\u8861\u3002</p>"},{"location":"#mit-6824-distributed-systems","title":"MIT 6.824 Distributed Systems","text":"<p>link: Videos</p> <ul> <li>[X] \u8bfe\u7a0b\u7b80\u4ecb</li> <li>[X] RPC\u4e0e\u591a\u7ebf\u7a0b</li> <li>[X] GFS</li> <li>[X] Primary-Backup Replication</li> <li>[X] Go Threads and Raft</li> <li> <p>[x] Fault Tolerance - Raft</p> </li> <li> <p>\u76f8\u5173\u5fc5\u8bfb\u8d44\u6599\uff1a </p> </li> </ul> <p>Course website</p> <p>Guide to Raft</p> <p>Lab1: MapReduce ----- paper</p> <p>Lab2: Raft-----paper</p> <p>Lab3: Fault-tolerant Key/Value Service</p> <p>Lab4: Sharded Key/Value Service</p>"},{"location":"#interview-questions","title":"Interview Questions","text":"<p>AKA \u516b\u80a1\u6587 \u4ee5\u53ca\u5176\u4ed6\u672a\u80fd\u53ca\u65f6\u5f52\u7c7b</p> <p>1. mysql\u7d22\u5f15\u4e3a\u4ec0\u4e48\u8981\u7528B+\u6811\uff1f  - \u9ad8\u5ea6\u77ee, \u78c1\u76d8IO\u76f8\u5bf9\u5c11  - \u975e\u53f6\u5b50\u8282\u70b9\u53ea\u4fdd\u5b58\u7d22\u5f15\uff0c\u4e0d\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u6570\u636e\u90fd\u4fdd\u5b58\u5728\u53f6\u5b50\u8282\u70b9\u4e2d  - \u5185\u90e8\u8282\u70b9\u66f4\u5c0f\uff0c\u4e00\u6b21IO\u53ef\u67e5\u66f4\u591a\u5173\u952e\u8bcd  - B+\u6811\u53ea\u9700\u8981\u53bb\u904d\u5386\u53f6\u5b50\u8282\u70b9\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6574\u68f5\u6811\u7684\u904d\u5386\uff0c \u63d0\u5347\u8303\u56f4\u67e5\u627e\u6548\u7387  - \u6bcf\u6b21\u67e5\u627e\u90fd\u4ece\u6839\u90e8\u5230\u53f6\u5b50\uff0c\u6027\u80fd\u7a33\u5b9a</p> <p>2. \u6b7b\u95014\u5fc5\u8981\u6761\u4ef6\u53ca\u9884\u9632\u5904\u7406? \u53c2\u8003\u8d44\u6599  - \u4e92\u65a5\u6761\u4ef6  \u8fdb\u7a0b\u5bf9\u8d44\u6e90\u8fdb\u884c\u6392\u4ed6\u6027\u63a7\u5236  - \u4e0d\u53ef\u5265\u593a\u6761\u4ef6  \u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u53ea\u80fd\u662f\u4e3b\u52a8\u91ca\u653e  - \u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6    \u8fdb\u7a0b\u5df2\u7ecf\u4fdd\u6301\u4e86\u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u63d0\u51fa\u4e86\u65b0\u7684\u8d44\u6e90\u8bf7\u6c42\uff0c\u800c\u8be5\u8d44\u6e90\u5df2\u88ab\u5176\u4ed6\u8fdb\u7a0b\u5360\u6709\uff0c\u6b64\u65f6\u8bf7\u6c42\u8fdb\u7a0b\u88ab\u963b\u585e\uff0c\u4f46\u5bf9\u81ea\u5df1\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u4fdd\u6301\u4e0d\u653e\u3002  - \u5faa\u73af\u7b49\u5f85\u6761\u4ef6     \u5b58\u5728\u4e00\u79cd\u8fdb\u7a0b\u8d44\u6e90\u7684\u5faa\u73af\u7b49\u5f85\u94fe\uff0c\u94fe\u4e2d\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u540c\u65f6\u88ab \u94fe\u4e2d\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u6240\u8bf7\u6c42\u3002</p> <p>3. Race Condition ?</p> <p>\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u8bd5\u56fe\u4fee\u6539\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u7684\u5185\u5bb9\uff0c\u5728\u6ca1\u6709\u5e76\u53d1\u63a7\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u7684\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u8fdb\u7a0b\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u65f6\u673a\u3002</p> <ul> <li>\u89e3\u51b3\u539f\u5219\uff1a</li> <li>\u4e0d\u4f1a\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u8fdb\u7a0b\u540c\u65f6\u51fa\u73b0\u5728\u4ed6\u4eec\u7684critical section\u3002 </li> <li>\u4e0d\u8981\u505a\u4efb\u4f55\u5173\u4e8eCPU\u901f\u5ea6\u548c\u6570\u91cf\u7684\u5047\u8bbe\u3002 </li> <li>\u4efb\u4f55\u8fdb\u7a0b\u5728\u8fd0\u884c\u5230critical section\u4e4b\u5916\u65f6\u90fd\u4e0d\u80fd\u963b\u585e\u5176\u4ed6\u8fdb\u7a0b\u3002 </li> <li>\u4e0d\u4f1a\u6709\u8fdb\u7a0b\u6c38\u8fdc\u7b49\u5728critical section\u4e4b\u524d\u3002</li> </ul> <p>4. \u4f20\u8f93\u5c42\u534f\u8bae TCP/UDP</p> <ul> <li> <p>TCP\u662f\u9762\u5411\u8fde\u63a5\u7684\uff0c\u53ef\u9760\u7684\u6d41\u534f\u8bae\u3002TCP\u53ef\u5b9e\u884c\u201c\u987a\u5e8f\u63a7\u5236\u201d\uff0c \u201c\u91cd\u53d1\u63a7\u5236\u201d\uff0c \u201c\u6d41\u91cf\u63a7\u5236\u201d\uff0c \u201c\u62e5\u585e\u63a7\u5236\u201d\u3002</p> </li> <li> <p>UDP\u4e0d\u53ef\u9760\u6570\u636e\u62a5\u534f\u8bae\uff0c\u53ef\u4ee5\u786e\u4fdd\u53d1\u9001\u6d88\u606f\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e0d\u4fdd\u8bc1\u6570\u636e\u4e00\u5b9a\u9001\u8fbe\uff0c\u6240\u4ee5\u6709\u65f6\u5019\u9700\u8981\u91cd\u53d1\u3002</p> </li> <li> <p>UDP\u4e3b\u8981\u7528\u4e8e\u54ea\u4e9b\u5bf9\u9ad8\u901f\u4f20\u8f93\u548c\u5b9e\u65f6\u6027\u6709\u8f83\u9ad8\u8981\u6c42\u7684\u901a\u4fe1\u6216\u5e7f\u64ad\u901a\u4fe1\u3002</p> </li> <li> <p>TCP \u53ef\u4ee5\u5728 IP \u8fd9\u79cd\u65e0\u8fde\u63a5\u7684\u7f51\u7edc\u4e0a\u4e5f\u80fd\u591f\u5b9e\u73b0\u9ad8\u53ef\u9760\u6027\u7684\u901a\u4fe1\uff08 \u4e3b\u8981\u901a\u8fc7\u68c0\u9a8c\u548c\u3001\u5e8f\u5217\u53f7\u3001\u786e\u8ba4\u5e94\u7b54\u3001\u91cd\u53d1\u63a7\u5236\u3001\u8fde\u63a5\u7ba1\u7406\u4ee5\u53ca\u7a97\u53e3\u63a7\u5236\u7b49\u673a\u5236\u5b9e\u73b0\uff09</p> </li> <li> <p>TCP \u901a\u4fe1\u5f00\u59cb\u524d\u9700\u8981\u505a\u597d\u8fde\u63a5\u51c6\u5907\uff0c\u4e09\u6b21\u63e1\u624b\u8fde\u63a5\uff0c\u56db\u6b21\u6325\u624b\u65ad\u5f00\u3002   (1)\u5ba2\u6237\u7aef\uff1aSYN=1 seq =j</p> </li> </ul> <p>(2)\u670d\u52a1\u5668 SYN=1 ACK=1 ack=J+1,seq=K</p> <p>(3)\u5ba2\u6237\u7aef ACK=1 ack=K+1    </p> <ul> <li> <p>\u5229\u7528\u7a97\u53e3\u63a7\u5236\u63d0\u9ad8\u901f\u5ea6\uff1aTCP \u4ee51\u4e2a\u6bb5\u4e3a\u5355\u4f4d\uff0c\u6bcf\u53d1\u9001\u4e00\u4e2a\u6bb5\u8fdb\u884c\u4e00\u6b21\u786e\u8ba4\u5e94\u7b54\u7684\u5904\u7406\u3002\u8fd9\u6837\u7684\u4f20\u8f93\u65b9\u5f0f\u5305\u7684\u901a\u4fe1\u6027\u80fd\u4f1a\u6bd4\u8f83\u4f4e\u3002TCP \u5f15\u5165\u4e86\u7a97\u53e3\u8fd9\u4e2a\u6982\u5ff5\u3002\u786e\u8ba4\u5e94\u7b54\u4ee5\u66f4\u5927\u7684\u5355\u4f4d\u8fdb\u884c\u786e\u8ba4\uff0c\u8f6c\u53d1\u65f6\u95f4\u5c06\u4f1a\u88ab\u5927\u5e45\u5730\u7f29\u77ed\u3002</p> </li> <li> <p>\u5728\u6574\u4e2a\u7a97\u53e3\u7684\u786e\u8ba4\u5e94\u7b54\u6ca1\u6709\u5230\u8fbe\u4e4b\u524d\uff0c\u5982\u679c\u5176\u4e2d\u90e8\u5206\u6570\u636e\u51fa\u73b0\u4e22\u5305\uff0c\u90a3\u4e48\u53d1\u9001\u7aef\u4ecd\u7136\u8981\u8d1f\u8d23\u91cd\u4f20\u3002\u4e3a\u6b64\uff0c\u53d1\u9001\u7aef\u4e3b\u673a\u9700\u8981\u8bbe\u7f6e\u7f13\u5b58\u4fdd\u7559\u8fd9\u4e9b\u5f85\u88ab\u91cd\u4f20\u7684\u6570\u636e\uff0c\u76f4\u5230\u6536\u5230\u4ed6\u4eec\u7684\u786e\u8ba4\u5e94\u7b54\u3002\u800c\u6536\u5230\u786e\u8ba4\u5e94\u7b54\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u7a97\u53e3\u6ed1\u52a8\u5230\u786e\u8ba4\u5e94\u7b54\u4e2d\u7684\u5e8f\u5217\u53f7\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u53ef\u4ee5\u987a\u5e8f\u5730\u5c06\u591a\u4e2a\u6bb5\u540c\u65f6\u53d1\u9001\u63d0\u9ad8\u901a\u4fe1\u6027\u80fd\u3002\u8fd9\u79cd\u673a\u5236\u4e5f\u522b\u79f0\u4e3a\u6ed1\u52a8\u7a97\u53e3\u63a7\u5236\u3002</p> </li> </ul> <p>5. \u4e92\u65a5\u9501sync.Mutex\uff0c\u8bfb\u5199\u9501sync.RWMutex</p> <p>\u4e92\u65a5\u9501\u7684\u4e24\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e92\u76f8\u6392\u65a5\uff0c\u53ea\u6709\u5176\u4e2d\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\u6267\u884c\u5b8c\u6210\u540e\uff0c\u53e6\u4e00\u4e2a\u624d\u80fd\u6267\u884c\u3002</p> <p>\u8bfb\u5199\u9501 <code>\u591a\u8bfb\u5355\u5199\u9501</code> (multiple readers, single writer lock)\uff0c\u7b80\u79f0\u8bfb\u5199\u9501\uff0c\u8bfb\u5199\u9501\u5206\u4e3a\u8bfb\u9501\u548c\u5199\u9501\uff0c\u8bfb\u9501\u662f\u5141\u8bb8\u540c\u65f6\u6267\u884c\u7684\uff0c\u4f46\u5199\u9501\u662f\u4e92\u65a5\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6709\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u8bfb\u9501\u4e4b\u95f4\u4e0d\u4e92\u65a5\uff0c\u6ca1\u6709\u5199\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u8bfb\u9501\u662f\u65e0\u963b\u585e\u7684\uff0c\u591a\u4e2a\u534f\u7a0b\u53ef\u4ee5\u540c\u65f6\u83b7\u5f97\u8bfb\u9501\u3002</li> <li>\u5199\u9501\u4e4b\u95f4\u662f\u4e92\u65a5\u7684\uff0c\u5b58\u5728\u5199\u9501\uff0c\u5176\u4ed6\u5199\u9501\u963b\u585e\u3002</li> <li>\u5199\u9501\u4e0e\u8bfb\u9501\u662f\u4e92\u65a5\u7684\uff0c\u5982\u679c\u5b58\u5728\u8bfb\u9501\uff0c\u5199\u9501\u963b\u585e\uff0c\u5982\u679c\u5b58\u5728\u5199\u9501\uff0c\u8bfb\u9501\u963b\u585e</li> </ul> <p>\u5982\u679c\u8bfb\u591a\u5199\u5c11\uff0c\u90a3\u4e48\u8bfb\u5199\u9501\u7684\u6027\u80fd\u8981\u6bd4\u4e92\u65a5\u9501\u9ad8\u975e\u5e38\u591a\uff0c\u4f46\u662f\u5982\u679c\u5199\u591a\u8bfb\u5c11\u7684\u8bfb\u5199\u9501\u548c\u4e92\u65a5\u9501\u7684\u6027\u80fd\u5dee\u8ddd\u4e0d\u5927\u3002</p> <p>6. Redis\u7f13\u5b58\u7a7f\u900f\uff0c\u7f13\u5b58\u96ea\u5d29\uff0c\u7f13\u5b58\u51fb\u7a7f</p> <ul> <li>\u7f13\u5b58\u7a7f\u900f\uff1a\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key\uff0c\u7f13\u5b58\u4e0d\u8d77\u4f5c\u7528\uff0c\u8bf7\u6c42\u4f1a\u7a7f\u900f\u5230DB\uff0c\u6d41\u91cf\u5927\u65f6DB\u4f1a\u6302\u6389\u3002</li> </ul> <p>\u89e3\u51b3\u65b9\u6848\uff1a    - \u5e03\u9686\u8fc7\u6ee4\u5668\uff0c\u4f7f\u7528\u4e00\u4e2a\u8db3\u591f\u5927\u7684bitmap\uff0c\u7528\u4e8e\u5b58\u50a8\u53ef\u80fd\u8bbf\u95ee\u7684key\uff0c\u4e0d\u5b58\u5728\u7684key\u76f4\u63a5\u88ab\u8fc7\u6ee4\uff1b   - \u8bbf\u95eekey\u672a\u5728DB\u67e5\u8be2\u5230\u503c\uff0c\u4e5f\u5c06\u7a7a\u503c\u5199\u8fdb\u7f13\u5b58\uff0c\u4f46\u53ef\u4ee5\u8bbe\u7f6e\u8f83\u77ed\u8fc7\u671f\u65f6\u95f4\u3002</p> <ul> <li>\u7f13\u5b58\u96ea\u5d29\uff1a\u5927\u91cf\u7684key\u8bbe\u7f6e\u4e86\u76f8\u540c\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5bfc\u81f4\u5728\u7f13\u5b58\u5728\u540c\u4e00\u65f6\u523b\u5168\u90e8\u5931\u6548\uff0c\u9020\u6210\u77ac\u65f6DB\u8bf7\u6c42\u91cf\u5927\u3001\u538b\u529b\u9aa4\u589e\uff0c\u5f15\u8d77\u96ea\u5d29\u6548\u5e94\u3002</li> </ul> <p>\u89e3\u51b3\u65b9\u6848\uff1a</p> <ul> <li> <p>\u901a\u8fc7\u7ed9\u7f13\u5b58\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u65f6\u52a0\u4e0a\u4e00\u4e2a\u968f\u673a\u503c\u65f6\u95f4\uff0c\u4f7f\u5f97\u6bcf\u4e2akey\u7684\u8fc7\u671f\u65f6\u95f4\u5206\u5e03\u5f00\u6765\uff0c\u4e0d\u4f1a\u96c6\u4e2d\u5728\u540c\u4e00\u65f6\u523b\u5931\u6548\u3002</p> </li> <li> <p>\u4e8c\u7ea7\u7f13\u5b58\uff0ca1\u5931\u6548\u65f6\u5019\uff0c\u8bbf\u95eea2\uff0ca1\u5931\u6548\u7684\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u77ed\u671f\uff0ca2\u4e3a\u957f\u671f</p> </li> <li> <p>\u7f13\u5b58\u51fb\u7a7f\uff1a \u4e00\u4e2a\u5b58\u5728\u7684key\uff0c\u5728\u7f13\u5b58\u8fc7\u671f\u7684\u4e00\u523b\uff0c\u540c\u65f6\u6709\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u90fd\u4f1a\u51fb\u7a7f\u5230DB\uff0c\u9020\u6210\u77ac\u65f6DB\u8bf7\u6c42\u91cf\u5927\u3001\u538b\u529b\u9aa4\u589e\u3002</p> </li> </ul> <p>\u89e3\u51b3\u65b9\u6848\uff1a \u5728\u8bbf\u95eekey\u4e4b\u524d\uff0c\u91c7\u7528SETNX\uff08set if not exists\uff09\u6765\u8bbe\u7f6e\u53e6\u4e00\u4e2a\u77ed\u671fkey\u6765\u9501\u4f4f\u5f53\u524dkey\u7684\u8bbf\u95ee\uff0c\u8bbf\u95ee\u7ed3\u675f\u518d\u5220\u9664\u8be5\u77ed\u671fkey\u3002</p> <p>7. \u6d77\u91cf\u6570\u636e\u7684\u67e5\u8be2\u4f18\u5316\uff1f</p> <ul> <li>\u4f18\u5316\u7d22\u5f15\uff1a \u901a\u8fc7\u5efa\u7acb\u5408\u7406\u9ad8\u6548\u7684\u7d22\u5f15,\u63d0\u9ad8\u67e5\u8be2\u7684\u901f\u5ea6.</li> <li>SQL\u4f18\u5316\uff1a \u7ec4\u7ec7\u4f18\u5316SQL\u8bed\u53e5,\u4f7f\u67e5\u8be2\u6548\u7387\u8fbe\u5230\u6700\u4f18,\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u8981\u8003\u8651\u7d22\u5f15\u7684\u4f5c\u7528.</li> <li>\u6c34\u5e73\u62c6\u8868\uff1a \u5982\u679c\u8868\u4e2d\u7684\u6570\u636e\u5448\u73b0\u51fa\u67d0\u4e00\u7c7b\u7279\u6027,\u6bd4\u5982\u5448\u73b0\u65f6\u95f4\uff0c\u5730\u70b9\u7b49,\u90a3\u4e48\u53ef\u4ee5\u6839\u636e\u7279\u6b8a\u6027\u5c06\u8868\u62c6\u5206\u6210\u591a\u4e2a\uff0c \u8fdb\u884c\u62c6\u5206\u67e5\u8be2\u540e\u518d\u5408\u5e76\u7ed3\u679c</li> <li>\u5782\u76f4\u62c6\u8868\uff1a \u5355\u8868\u62c6\u591a\u8868\uff0c\u5c06\u5e38\u7528\u548c\u4e0d\u5e38\u7528\uff0c\u957f\u5185\u5bb9\u548c\u77ed\u5185\u5bb9\u5206\u5f00 \uff08\u7531\u4e8e\u6570\u636e\u5e93\u6bcf\u6b21\u67e5\u8be2\u90fd\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\uff0c\u800c\u6bcf\u5757\u7684\u5bb9\u91cf\u662f\u6709\u9650\u7684\uff0c\u901a\u5e38\u662f\u5341\u51e0K\u6216\u51e0\u5341K\uff0c\u5c06\u8868\u6309\u5b57\u6bb5\u62c6\u5206\u540e\uff0c\u5355\u6b21IO\u6240\u80fd\u68c0\u7d22\u5230\u7684\u884c\u6570\u901a\u5e38\u4f1a\u63d0\u9ad8\u5f88\u591a\uff0c\u67e5\u8be2\u6548\u7387\u5c31\u80fd\u63d0\u9ad8\u4e0a\u53bb\u3002\uff09</li> <li>\u5efa\u7acb\u4e2d\u95f4\u8868\uff0c\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4</li> <li>\u7528\u5185\u5b58\u7f13\u5b58\u6570\u636e\uff0c \u6bd4\u5982\u4f7f\u7528Redis</li> </ul> <p>8. Typescript \u7684\u4f18\u52bf</p> <ul> <li> <p>TypeScript \u662f\u5f3a\u7c7b\u578b\u9762\u5bf9\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00, \u589e\u52a0\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027</p> </li> <li> <p>\u652f\u6301\u9759\u6001\u7c7b\u578b\uff0c\u652f\u6301 Class\u3001Interface\u3001Generics\u3001Enums\u7b49\u3002</p> </li> <li> <p>TypeScript \u62e5\u62b1\u4e86 ES6 \u89c4\u8303</p> </li> <li> <p>\u517c\u5bb9\u5f88\u591a\u7b2c\u4e09\u65b9\u5e93\u3002</p> </li> <li> <p>TypeScript \u5728\u5f00\u53d1\u65f6\u5c31\u80fd\u7ed9\u51fa\u7f16\u8bd1\u9519\u8bef\uff0c\u800c JavaScript \u9519\u8bef\u5219\u9700\u8981\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u66b4\u9732</p> </li> </ul> <p>9. \u70edKey\u89e3\u51b3\u65b9\u6848</p> <ul> <li>\u52a0\u4e8c\u7ea7\u7f13\u5b58\uff0c \u672c\u5730\u7f13\u5b58</li> <li>\u5206\u5e03\u5f0f\u5907\u4efd\u70edkey\u5230\u591a\u4e2aredis\u4e0a\uff0c \u968f\u673a\u83b7\u53d6\u5185\u5bb9\u5206\u6563\u5355\u53f0\u670d\u52a1\u5668\u538b\u529b\u3002</li> </ul>"},{"location":"#support-or-contact","title":"Support or Contact","text":"<p>email: luopengllpp@hotmail.com</p>"},{"location":"DDIA-Notes/","title":"Designing Data-Intensive Application Reading Notes","text":""},{"location":"DDIA-Notes/#_1","title":"\u7b2c\u4e00\u90e8\u5206 \u6570\u636e\u7cfb\u7edf\u57fa\u7840","text":""},{"location":"DDIA-Notes/#_2","title":"\u7b2c\u4e00\u7ae0\uff1a \u53ef\u9760\uff0c\u53ef\u6269\u5c55\u53ef\u7ef4\u62a4\u7684\u7cfb\u7edf","text":"<p>\u57fa\u672c\u6982\u5ff5\u4ecb\u7ecd\u4e3e\u4f8b\u8bf4\u660e</p>"},{"location":"DDIA-Notes/#_3","title":"\u7b2c\u4e8c\u7ae0\uff1a \u6570\u636e\u6a21\u578b\u4e0e\u67e5\u8be2\u8bed\u8a00","text":"<p>\u9610\u8ff0\u5173\u7cfb\u4e0e\u975e\u5173\u7cfb\u6570\u636e\u5e93\u7684\u5404\u81ea\u7531\u6765\u4e0e\u5e94\u7528</p> <p>\u4ecb\u7ecd\u4e00\u4e9b\u6570\u636e\u67e5\u8be2\u8bed\u8a00\u4e0e\u6570\u636e\u8868\u793a\u6a21\u578b\uff08\u6587\u6863\u6a21\u578b\uff0c\u5173\u7cfb\u6a21\u578b\uff0c \u56fe\u6a21\u578b\uff09</p>"},{"location":"DDIA-Notes/#_4","title":"\u7b2c\u4e09\u7ae0\uff1a \u6570\u636e\u5b58\u50a8\u4e0e\u68c0\u7d22","text":"<p>\u7d22\u5f15\u7684\u53d1\u5c55</p> <p>\u4e8b\u52a1\u5904\u7406\uff08OLTP\uff09\u4e0e\u5206\u6790\u7cfb\u7edf (OLAP)</p>"},{"location":"DDIA-Notes/#_5","title":"\u7b2c\u56db\u7ae0\uff1a \u6570\u636e\u7f16\u7801\u4e0e\u6f14\u5316","text":""},{"location":"DDIA-Notes/#_6","title":"\u7b2c\u4e8c\u90e8\u5206 \u5206\u5e03\u5f0f\u6570\u636e\u7cfb\u7edf","text":""},{"location":"DDIA-Notes/#_7","title":"\u7b2c\u4e09\u90e8\u5206 \u6d3e\u751f\u6570\u636e","text":""},{"location":"algorithms/","title":"Data structure and Algorithms","text":"<p>\u7528Python\u5b9e\u73b0LRU \u7f13\u5b58</p> <pre><code>from collections import OrderedDict\n\nclass LRUCache:\n  def __init__(self, capacity: int):\n    self.cache = OrderedDict()\n    self.capacity = capacity\n\n  def get(self, key: int) -&gt; int:\n    if key not in self.cache:\n      return -1\n    # move the key to the end\n    self.cache.move_to_end(key)\n    return self.cache[key]\n\n  def put(self, key: int, value: int) -&gt; None:\n    if key in self.cache:\n      self.cache.move_to_end(key)\n    self.cache[key] = value\n    if len(self.cache) &gt; self.capacity:\n      self.cache.popitem(last=False)\n</code></pre>"},{"location":"algorithms/#stringarray","title":"String\uff0cArray","text":"<p>283 \u539f\u5730\u79fb\u52a80\u5230\u524d\u9762  \u53d8\u5f62\uff08\u79fb\u52a80\u5230\u672b\u5c3e\uff09</p> <pre><code>def moveZeroes(nums) -&gt; None:\n    lp, rp = len(nums)-1, len(nums)-1\n    while lp &gt;= 0 and rp &gt;= 0:\n        if nums[lp] != 0:\n            nums[lp], nums[rp] = nums[rp], nums[lp]\n            rp -= 1\n        lp-=1\n    return nums\nprint(moveZeroes([1, 2, 3, 0, 0]))\n</code></pre> <p>56 \u5408\u5e76\u533a\u95f4</p> <pre><code>def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n    intervals.sort(key= lambda x:x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] &lt; interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged\n</code></pre> <p>10.01 \u5408\u5e76\u6392\u5e8f\u7684\u6570\u7ec4</p> <pre><code>    def merge(self, A: List[int], m: int, B: List[int], n: int) -&gt; None:\n            # \u4e09\u6307\u9488\n        pa = m - 1\n        pb = n - 1\n        ptail = m + n - 1\n        while pa&gt;=0 or pb&gt;=0:\n            if pa == -1:\n                A[ptail] = B[pb]\n                pb -= 1\n            elif pb == -1:\n                return\n            elif A[pa]&lt;=B[pb]:\n                A[ptail] = B[pb]\n                pb -= 1\n            else: \n                A[ptail] = A[pa]\n                pa -= 1\n            ptail -= 1\n</code></pre> <p>26 \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u5143\u7d20</p> <pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        p = 0\n        for i in range(1, len(nums)):\n            if nums[i] != nums[p]:\n                p+=1\n                nums[p] = nums[i]\n        return p+1, nums\n\n</code></pre> <p>8/ LCR192 \u5b57\u7b26\u8f6c\u6570\u5b57</p> <pre><code>    def strToInt(self, str: str) -&gt; int:\n        flag, result = 1, 0\n        str = str.strip()\n        for i in range(len(str)):\n            if i == 0 and str[i] in ['-', '+']:\n                if str[i] == '-':\n                    flag *= -1\n                continue\n            if not str[i].isdigit():\n                break \n            result = result * 10 + ord(str[i]) - ord('0')\n        return min(2**31 - 1, result * flag) if flag == 1 else max(-2**31, result * flag)\n\n</code></pre> <p>1881 \u63d2\u5165\u540e\u7684\u6700\u5927\u503c</p> <pre><code>  \u540c\u7c7b\u9898\u76ee \u63d2\u51655   \n  def insert_five(self, a: int) -&gt; int:\n        res, sa, res = 0, str(a), None\n        if a &lt; 0:\n            for i in range(1, len(sa)):\n                if int(sa[i]) &gt; 5:\n                    res = sa[:i]+'5'+sa[i:]\n                    return int(res)\n                if i == len(sa)-1: return int(sa+'5')\n\n        if a &gt;= 0:\n            for i in range(0, len(sa)):\n                if int(sa[i]) &lt; 5:\n                    res = sa[:i]+'5'+sa[i:]\n                    return int(res)\n                if i == len(sa)-1: return int(sa+'5')\n\n\n</code></pre> <p>Can you find the triplets whose sum is zero?</p> <pre><code>def findTriplets(arr, n):\n    found = False\n    for i in range(n - 1):\n        # Find all pairs with sum\n        # equals to \"-arr[i]\"\n        s = set()\n        res = []\n        for j in range(i + 1, n):\n            x = -(arr[i] + arr[j])\n            if x in s:\n                print(x, arr[i], arr[j])\n                                res.append([x, arr[i], arr[j]])\n            else:\n                s.add(arr[j])\n        return res\n\n# Driver Code\narr = [0, -1, 2, -3, 1]\nn = len(arr)\nfindTriplets(arr, n)\n</code></pre> <p>What is the largest subset whose elements are Fibonacci numbers?</p> <pre><code>def generate_fibonacci(max_value):\n    fib_set = {0, 1}  # Starting with the first two Fibonacci numbers\n    a, b = 0, 1\n    while b &lt;= max_value:\n        a, b = b, a + b\n        fib_set.add(b)\n    return fib_set\n\ndef largest_fibonacci_subset(input_set):\n    max_value = max(input_set)\n    fib_set = generate_fibonacci(max_value)\n    return input_set.intersection(fib_set)\n\n# Example usage:\ninput_numbers = {0, 1, 2, 3, 4, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377}\nlargest_subset = largest_fibonacci_subset(input_numbers)\nprint(largest_subset)\n</code></pre> <p>Calculate the maximum value using the '+' or '*' sign between two numbers in the given string.</p> <pre><code>def calcMaxValue(str): \n\n    # Store first character as integer \n    # in result \n    res = int(str[0])\n\n    # Start traversing the string  \n    for i in range(1, len(str)): \n\n        # Check if any of the two numbers  \n        # is 0 or 1, If yes then add current  \n        # element \n        if(str[i] == '0' or\n           str[i] == '1' or res &lt; 2): \n            res += int(str[i])\n        else: \n            res *= int(str[i]) \n    return res  \n</code></pre>"},{"location":"algorithms/#binary-tree","title":"Binary Tree","text":"<ul> <li>\u524d\u5e8f\u904d\u5386\uff1a\u5148\u8bbf\u95ee\u6839\u8282\u70b9-&gt; \u524d\u5e8f\u904d\u5386\u5de6\u5b50\u6811-&gt; \u524d\u5e8f\u904d\u5386\u53f3\u5b50\u6811 </li> <li>\u4e2d\u5e8f\u904d\u5386\uff1a\u5148\u4e2d\u5e8f\u904d\u5386\u5de6\u5b50\u6811-&gt; \u6839\u8282\u70b9-&gt; \u4e2d\u5e8f\u904d\u5386\u53f3\u5b50\u6811 </li> <li>\u540e\u5e8f\u904d\u5386\uff1a\u5148\u540e\u5e8f\u904d\u5386\u5de6\u5b50\u6811-&gt; \u540e\u5e8f\u904d\u5386\u53f3\u5b50-&gt; \u8bbf\u95ee\u6839\u8282\u70b9</li> </ul> <p>\u9012\u5f52\u904d\u5386\uff1a</p> <pre><code>    #python\n    def inorderTraversal(self, root: TreeNode) -&gt; List[int]:\n        res = []\n        def inorder(root):\n            if not root:\n                return\n            res.append(root.val) #\u524d\u5e8f\n            inorder(root.left)\n            res.append(root.val) #\u4e2d\u5e8f\n            inorder(root.right)\n            res.append(root.val) #\u540e\u5e8f\n        inorder(root)\n        return res\n</code></pre> <p>102 \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386</p> <p>236 \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 </p> <pre><code>def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -&gt; TreeNode:\n\n    # \u5982\u679c p\u548cq\u4e2d\u6709\u7b49\u4e8e root\u7684\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5373\u4e3aroot\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\n    if not root or root == p or root == q: return root\n    # \u9012\u5f52\u904d\u5386\u5de6\u53f3\u5b50\u6811\uff0c\u53ea\u8981\u5728\u5b50\u6811\u4e2d\u627e\u5230\u4e86p\u6216q\uff0c\u5219\u5148\u627e\u5230\u8c01\u5c31\u8fd4\u56de\u8c01\n    left = self.lowestCommonAncestor(root.left, p, q)\n    right = self.lowestCommonAncestor(root.right, p, q)\n\n    # \u5f53 left\u548c right\u5747\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u8bf4\u660e p\u3001q\u8282\u70b9\u5206\u522b\u5728 root\u5f02\u4fa7, \u6700\u8fd1\u516c\u5171\u7956\u5148\u5373\u4e3a root\n    if not left and not right: return \n    # \u5982\u679c\u5728\u5de6\u5b50\u6811\u4e2d p\u548c q\u90fd\u627e\u4e0d\u5230\uff0c\u5219 p\u548c q\u4e00\u5b9a\u90fd\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u53f3\u5b50\u6811\u4e2d\u5148\u904d\u5386\u5230\u7684\u90a3\u4e2a\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\n    if not left: return right\n    # \u5982\u679c left\u4e0d\u4e3a\u7a7a\uff0c\u5728\u5de6\u5b50\u6811\u4e2d\u6709\u627e\u5230\u8282\u70b9\uff08p\u6216q\uff09\uff0c\u8fd9\u65f6\u5019\u8981\u518d\u5224\u65ad\u4e00\u4e0b\u53f3\u5b50\u6811\u4e2d\u7684\u60c5\u51b5\uff0c\u5982\u679c\u5728\u53f3\u5b50\u6811\u4e2d\uff0cp\u548cq\u90fd\u627e\u4e0d\u5230\uff0c\u5219 p\u548cq\u4e00\u5b9a\u90fd\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u5de6\u5b50\u6811\u4e2d\u5148\u904d\u5386\u5230\u7684\u90a3\u4e2a\u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\n    if not right: return left\n\n    return root \n</code></pre> <p>\u8fed\u4ee3\u904d\u5386\uff1a</p> <p>\u627e\u5230\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u516c\u5171\u7956\u5148</p>"},{"location":"algorithms/#linked-list","title":"Linked List","text":"<p>83 \u5220\u9664\u6709\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20</p> <pre><code>def deleteDuplicates(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        cur = head\n        while cur:\n            while cur.next and cur.val == cur.next.val:\n                cur.next =  cur.next.next\n            cur = cur.next\n        return head\n\n</code></pre> <p>\u5220\u9664\u6709\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u4e8c 82</p> <pre><code>def deleteDuplicates(head):\n    pseudo = prev = ListNode(None)\n    pseudo.next = head\n    node = head\n    while node:\n        if node.next and node.val == node.next.val:\n            dupl_value = node.val\n            node = node.next\n            while node and node.val == dupl_value:\n                node = node.next\n            prev.next = None\n        else: \n            prev.next = node\n            prev = node\n            node = node.next\n    return pseudo.next\n</code></pre> <p>\u53cd\u8f6c\u94fe\u8868 206</p> <pre><code>class Solution:\n    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        # prev \u662f\u6240\u6709\u5df2\u7ecf\u9006\u8f6c\u7684\u8282\u70b9\u7684head\n        prev = None\n        while head is not None:\n            tmp = head.next\n            head.next = prev\n            prev = head\n            head = tmp\n        return prev\n</code></pre> <p>\u53cd\u8f6c\u94fe\u8868by every 2 24</p> <pre><code>func swapPairs(head *ListNode) *ListNode {\n    if head == nil {\n        return nil\n    }\n    //\u5934\u8282\u70b9\u589e\u52a0dummy head\n    dummy := &amp;ListNode{}\n        dummy.Next = head\n    prev := dummy\n    //\u5355\u53cc\u6570\u7ec8\u6b62\u68c0\u67e5\n        for head != nil &amp;&amp; head.Next != nil {\n        //prev-&gt;a-&gt;b-&gt;c\n            b := head.Next //\u6682\u5b58b\n            head.Next = b.Next //\u8fde\u63a5a-&gt;c\n            b.Next = head //\u7ffb\u8f6cb-&gt;a\n      //\u5c06prev\u6307\u5411\u7ffb\u8f6c\u540e\u7684\u5f53\u524d\u5934\u8282\u70b9b\n            prev.Next = b\n\n      //\u56e0\u4e3a\u4e24\u4e24\u4ea4\u6362 b-&gt;a(head)-&gt;c-&gt;d\n      //prev \u53d8\u4e3a a\n            prev = head\n      //\u63a8\u8fdbhead\u6307\u9488\u5230c,\u5f00\u59cb\u4e0b\u4e00\u4e2a\u7ffb\u8f6c\u5faa\u73af\n            head = head.Next\n        }\n        return dummy.Next\n}\n</code></pre> <p>\u53cd\u8f6c\u94fe\u8868by every K 25 - \u4e0e\u4e0a\u9898\u601d\u8def\u7c7b\u4f3c\uff0c\u9700\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u548c\u65ad\u94fe\u91cd\u8fde</p> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -&gt; Optional[ListNode]:\n        dummy = ListNode(0)\n        dummy.next = head\n        pre, end = dummy, dummy\n\n        while end.next:\n            for i in range(k):\n                if end:\n                    end = end.next\n            if not end:\n                break\n            #break the chain\n            start = pre.next\n            tmp = end.next\n            end.next = None\n\n            #reverse it and fit back\n            pre.next = self.reverseLL(start)\n            start.next = tmp\n\n            # enter next k loop\n            pre = start\n            end = pre\n\n        return dummy.next\n</code></pre> <p>\u5408\u5e76\u6709\u5e8f\u94fe\u8868 21</p> <pre><code>//\u9012\u5f52\u5b9e\u73b0\nclass Solution(object)\n    def mergeTwoLists(self, l1, l2):\n        prev = dummy = ListNode(None)\n\n        while l1 and l2:\n            if l1.val &lt; l2.val:\n                prev.next = l1\n                l1 = l1.next\n            else:\n                prev.next = l2\n                l2 = l2.next\n            prev = prev.next\n        prev.next = l1 or l2 # link prev to the list with remaining nodes\n        return dummy.next\n\n</code></pre> <p>\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u94fe\u8868 234</p> <pre><code>//\u5feb\u6162\u6307\u9488 \u7ffb\u8f6c\u94fe\u8868\ndef isPalindrome(head):\n    fast, slow = head, head\n    rev = None\n\n    while fast and fast.next:\n        fast = fast.next.next\n        next_slow = slow.next\n        slow.next = rev\n        rev = slow\n        slow = next_slow\n    if fast:\n            slow = slow.next\n    while slow:\n            if slow.val != rev.val:\n            return False\n        slow = slow.next\n        rev = rev.next\n    return True\n</code></pre> <p>\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af 141</p> <pre><code>//\u5feb\u6162\u6307\u9488\nfunc hasCycle(head *ListNode) bool {\n    if head == nil || head.Next == nil || head.Next.Next == nil{\n        return false\n    }\n    slow, fast := head, head.Next\n\n    for fast != nil &amp;&amp; fast.Next != nil {\n        slow = slow.Next\n        fast = fast.Next.Next\n        if fast == slow {\n            return true\n        }\n    }\n    return false\n}\n</code></pre> <p>160 \u76f8\u4ea4\u94fe\u8868 -- \u6c42\u957f\u5ea6\u5dee</p> <pre><code>func getIntersectionNode(headA, headB *ListNode) *ListNode {\n    if headA==nil || headB==nil {\n        return nil\n    }\n    tmpNode := headA ;\n    lengthA := 0\n    for true {\n        if tmpNode.Next != nil {\n            tmpNode = tmpNode.Next\n            lengthA++\n        } else {\n            break\n        }\n    }\n    tmpNode = headB\n    lengthB := 0\n    for true {\n        if tmpNode.Next != nil {\n            tmpNode = tmpNode.Next\n            lengthB++\n        } else {\n            break\n        }\n    }\n\n    if lengthA &gt;= lengthB {\n            for i := 0; i &lt; lengthA - lengthB; i++ {\n                headA = headA.Next;\n            }\n        } else {\n            for i := 0; i &lt; lengthB - lengthA; i++ {\n                headB = headB.Next;\n            }\n        }\n\n    for headA != nil {\n        if headA == headB {\n            return headA\n        } \n        headA = headA.Next\n        headB = headB.Next\n    }\n    return nil\n}\n</code></pre>"},{"location":"algorithms/#stack-and-queue","title":"Stack and Queue","text":"<p>\u5b57\u7b26\u4e32\u5339\u914d\uff08\u6709\u6548\u7684\u62ec\u53f7\uff09 20</p> <pre><code>//\u5de6\u534a\u8fb9\u5165\u6808, \u53f3\u8fb9\u5339\u914d\u51fa\u6808\u5426\u5219false\ndef isValid(s):\n    dic = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n\n    for char in s:\n        if char in dic:\n            stack.append(char)\n        else:\n            if not stack or dic[stack.pop()] != char:\n                return False\n    return not stack\n</code></pre>"},{"location":"algorithms/#two-pointers","title":"Two Pointers \u53cc\u6307\u9488","text":"<p>80 \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 2</p> <pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        l = 1\n        for r in range(2, len(nums)):\n            #\u548cnums[left]\u6bd4, \u8fd8\u8981\u548cnums[left - 1]\u6bd4\uff0c\u4fdd\u8bc1\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\u4e24\u6b21\n            if nums[r] == nums[l] and nums[r] == nums[l-1]:\n                continue\n            l += 1\n            nums[l] = nums[r] \n        return l + 1\n</code></pre> <p>986 \u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6</p> <pre><code>func intervalIntersection(firstList [][]int, secondList [][]int) [][]int {\n    //corner case\n    res := [][]int{}\n    if len(firstList) == 0 || len(secondList) == 0 {\n        return res\n    }\n\n    idx1, idx2 := 0, 0\n    for idx1 &lt; len(firstList) &amp;&amp; idx2 &lt; len(secondList) {\n            start := compare(firstList[idx1][0], secondList[idx2][0], true)\n            end := compare(firstList[idx1][1], secondList[idx2][1], false)\n            if start &lt;= end {\n                res = append(res, []int{start, end})\n            }\n            //\u8c01\u5148\u7ed3\u675f, \u8c01\u7684\u6307\u9488\u6b65\u8fdb\uff0c\u8003\u8651\u591a\u91cd\u5408\u533a\u95f4\u7684\u95ee\u9898\n            if firstList[idx1][1] &lt; secondList[idx2][1] {\n                idx1 += 1\n            } else {\n                idx2 += 1\n            }\n    }\n    return res\n\n}\n\nfunc compare(x int, y int, max bool) int {\n    if max == true {\n        if x &gt; y {\n            return x\n        }\n        return y\n    } else if max == false {\n        if x &lt; y {\n            return x\n        }\n        return y\n    }\n    return y\n}\n</code></pre> <p>11 \u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668</p> <pre><code>def maxArea(height):\n    left = 0\n    right = len(height)-1\n    max_area = (right - left) * min(height[right], height[left])\n    while left &lt; right:\n            if height[left] &lt; height[right]:\n            left += 1\n        else:\n            right -= 1\n        max_area = max(max_area, (right - left) * min(height[right], height[left]))\n    return max_area\n</code></pre> <p>415 \u5b57\u7b26\u4e32\u76f8\u52a0</p> <pre><code>        def addStrings(num1: str, num2: str) -&gt; str:\n                #\u53cc\u6307\u9488\u6a21\u62df\n        res = []\n        add = 0 #\u5b58\u50a8\u662f\u5426\u8fdb\u4f4d\n        x, y = len(num1)-1, len(num2)-1\n        while(x &gt;= 0 or y &gt;= 0):\n            #0\u8865\u4f4d\u5982\u679c\u957f\u5ea6\u4e0d\u540c\n            av = 0 if x&lt;0 else int(num1[x])\n            bv = 0 if y&lt;0 else int(num2[y])\n            sums = av + bv + add\n            #\u5176\u4ed6\u8fdb\u5236\u628a10\u6539\u76f8\u5e94\u5373\u53ef\n            res.append(str(sums%10))\n            add = 1 if sums&gt;=10 else 0\n            #\u5934\u90e8\u8fdb\u4f4d\n            if x &lt;= 0 and y &lt;= 0 and add == 1:\n                res.append(str(add))\n            x -= 1\n            y -= 1\n        return ''.join(reversed(res))       \n</code></pre>"},{"location":"algorithms/#dfs","title":"DFS","text":"<p>\u5c9b\u5c7f\u6570\u91cf 200 \u5ef6\u4f38\u95ee\u9898 695\u6700\u5927\u5c9b\u5c7f\u9762\u79ef 463 \u5c9b\u5c7f\u5468\u957f</p> <p>\u9012\u5f52DFS</p> <pre><code>def numIslands(grid):\n    if not grid:\n        return 0\n    count = 0\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1' and scan(grid, i, j)&gt;=1:\n                count += 1 \n        return count\n\ndef scan(grid, i, j):\n    if i&lt;0 or i &gt;= len(grid) or j&lt;0 or j &gt;= len(grid[0]):\n        return 0\n\n    if grid[i][j] == '1':\n        grid[i][j] = 0\n        return scan(grid, i-1, j) + scan(grid, i, j-1) + scan(grid, i+1, j) + scan(grid, i, j+1) + 1\n    return 0\n</code></pre> <pre><code>Target SUM\nDFS\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -&gt; int:\n        d = {}\n        def dfs(cur, i, d):\n            if i &lt; len(nums) and (cur, i) not in d: # \u641c\u7d22\u5468\u56f4\u8282\u70b9\n                d[(cur, i)] = dfs(cur + nums[i], i + 1, d) + dfs(cur - nums[i],i + 1, d)\n            return d.get((cur, i), int(cur == S))   \n        return dfs(0, 0, d)\n\n\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -&gt; int:\n        if sum(nums) &lt; S or (sum(nums) + S) % 2 == 1: return 0\n        P = (sum(nums) + S) // 2\n        dp = [1] + [0 for _ in range(P)]\n        for num in nums:\n            for j in range(P,num-1,-1):dp[j] += dp[j - num]\n        return dp[P]\n</code></pre> <p>463 \u5c9b\u5c7f\u5468\u957f</p> <pre><code>class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -&gt; int:\n        rowlen = len(grid)\n        if not grid or rowlen == 0:\n            return 0\n        collen = len(grid[0])\n        res = 0\n        for i in range(rowlen):\n            for j in range(collen):\n                if grid[i][j] == 1:\n                    res += 4\n                    if i-1&gt;=0 and grid[i-1][j] == 1:\n                        res -= 2\n                    if j-1&gt;=0 and grid[i][j-1] == 1:\n                        res -= 2\n        return res\n</code></pre>"},{"location":"algorithms/#binary-search","title":"Binary Search","text":"<p>35 \u641c\u63d2\u4f4d\u7f6e   \u57fa\u7840\u4e8c\u5206\u641c\u7d22</p> <pre><code>class Solution:\n    def searchInsert(self, nums: List[int], target: int) -&gt; int:\n        l, m, r = 0, 0, len(nums)\n        while l&lt;r:\n            m = int(l + (r-l)/2)\n            if nums[m] &gt; target:\n                r = m\n            elif nums[m] &lt; target:\n                l = m+1\n            elif nums[m] == target:\n                return m\n        return l\n</code></pre> <p>74 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635</p> <pre><code>func searchMatrix(matrix [][]int, target int) bool {\n    //corner case \n    if len(matrix) == 0 || matrix == nil {\n        return false\n    }\n\n    arr := make([]int, 0)\n    for _, v := range matrix {\n        arr = append(arr, v...)\n    }\n\n    return bSearch(arr, 0, len(arr)-1, target)\n}\n\n//\u4e8c\u5206\u641c\u7d22\u57fa\u672c\u6a21\u677f\nfunc bSearch(nums []int, start int, end int, target int) bool {\n    for start &lt; end {\n        mid := start + (end-start)/2\n        if nums[mid] &gt;= target {\n            end = mid\n        } else {\n            start = mid + 1\n        }\n    }\n\n    if nums[end] == target {\n        return true\n    } else {\n        return false\n    }\n}\n</code></pre> <p>33 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4</p> <pre><code>func search(nums []int, target int) int {\n    lens := len(nums)\n    //corner case\n    if lens == 1 {\n        if target == nums[0] {\n            return 0\n        } \n        return -1\n    }\n    //find twist point\n    tPoint := 0\n    for i:=1;i&lt;lens;i++ {\n        if nums[i-1] &gt; nums[i] {\n            tPoint = i-1\n        }\n    }\n\n    if res := binarySearch(nums, 0, tPoint, target); res != -1 {\n        return res\n    } else {\n        return binarySearch(nums, tPoint+1, lens-1, target)\n    }\n}\n\nfunc binarySearch(nums []int, left int, right int, target int) int {\n    mid := 0\n    for left &lt; right {\n        mid = left + (right-left)/2\n        if nums[mid] &gt;= target {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    if nums[right] == target {\n        return right\n    } else {\n        return -1\n    }\n}\n</code></pre>"},{"location":"algorithms/#dynamic-programming","title":"Dynamic Programming \u52a8\u6001\u89c4\u5212","text":"<p>\u9762\u8bd5\u9898 08.11 \u5206\u786c\u5e01</p> <pre><code>class Solution:\n    def waysToChange(self, n: int) -&gt; int:\n        # \u52a8\u6001\u89c4\u5212, dp[sm]\u5b58\u603b\u548c\u4e3asm\u7684\u65b9\u6848\u6570\n        # \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u786c\u5e01c, \u90fd\u6709dp[sm]=dp[sm]+dp[sm-c] (c&lt;=sm&lt;=n)\n        MOD = 1000000007\n        coins = [1, 5, 10, 25]\n        dp = [1] + [0] * n\n        for c in coins:\n            for sm in range(c, n + 1):\n                dp[sm] = (dp[sm] + dp[sm - c]) % MOD\n        return dp[n]\n</code></pre> <p>264 \u4e11\u65702  --  \u4e09\u6307\u9488 + DP</p> <pre><code>func nthUglyNumber(n int) int {\n    dp := make([]int, n+1)\n    dp[1] = 1\n    x, y, z := 1, 1, 1\n    for i:=2; i&lt;n+1; i++ {\n        x2, x3, x5 := dp[x]*2, dp[y]*3, dp[z]*5\n        dp[i] = min(min(x2, x3), x5)\n        if dp[i] == x2 {\n            x++\n        } \n        if dp[i] == x3 {\n            y++\n        }\n        if dp[i] == x5 {\n            z++\n        }\n    }\n    return dp[n]\n}\n</code></pre> <p>64 \u6700\u5c0f\u8def\u5f84\u548c \u7ecf\u5178\u52a8\u6001\u89c4\u5212</p> <pre><code>#python\nclass Solution:\n    def minPathSum(self, grid: [[int]]) -&gt; int:\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if i == j == 0: \n                    continue\n                #\u53ea\u80fd\u4ece\u5de6\u8fb9\u8fc7\u6765\n                elif i == 0:  \n                    grid[i][j] = grid[i][j - 1] + grid[i][j]\n                #\u53ea\u4ece\u4e0a\u8fb9\u4e0b\u6765\n                elif j == 0:  \n                    grid[i][j] = grid[i - 1][j] + grid[i][j]\n                else: \n                    #\u90fd\u53ef\u80fd\uff0c\u53d6\u5c0f\u7684\n                    grid[i][j] = min(grid[i - 1][j]+ grid[i][j], grid[i][j - 1]+ grid[i][j]) \n        return grid[-1][-1]\n</code></pre> <p>62 \u4e0d\u540c\u8def\u5f84</p> <pre><code>//\u7ecf\u5178\u52a8\u6001\u89c4\u5212\u95ee\u9898 dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n//\u8981\u4e48\u662f\u4ece\u4e0a\u9762\u683c\u5b50\u4e0b\u6765\u7684\uff0c\u8981\u4e48\u662f\u4ece\u5de6\u8fb9\u683c\u5b50\u8fc7\u6765\u7684\n</code></pre> <pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        dp = [ s for s in range(n) ]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[j] = 1\n                else:\n                    dp[j] = dp[j] + dp[j-1]\n        return dp[n-1]\n</code></pre> <p>53 \u6700\u5927\u5b50\u5e8f\u548c \u6700\u5927\u5b50\u6570\u7ec4\u548c        \u57fa\u7840\u9898 \u5206\u6cbb\u6cd5 DP</p> <p>\u57fa\u672cDP \u601d\u60f3\u516c\u5f0f <code>status[n+1] = max(status[n], status[n] + nums[n+1])</code></p> <pre><code>python \u7a7a\u95f4\u4f18\u5316\u540e\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        #dp \u8bb0\u5f55, \u4e0d\u7528\u8bb0\u5f55\u6240\u6709\u6570\u503c\uff0c\u53ea\u7528\u8bb0\u5f55\u6700\u5927\u503c\n        dp = nums[0]\n        maxSum = nums[0]\n        for i in range(1, len(nums)):\n            dp = max(nums[i], dp + nums[i])\n            if dp &gt; maxSum:\n                maxSum = dp\n\n        return maxSum\n</code></pre> <p>97 \u4ea4\u9519\u5b57\u7b26\u4e32</p> <pre><code>class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -&gt; bool:\n        #\u4e8c\u7ef4\u52a8\u6001\u89c4\u5212\n        len1 = len(s1)\n        len2 = len(s2)\n        len3 = len(s3)\n        if len1 + len2 != len3:\n            return False\n        dp = [ [False]*(len2+1) for i in range(len1+1) ]\n        dp[0][0] = True\n        for i in range(1, len1+1):\n            dp[i][0] = (dp[i-1][0] and s1[i-1] == s3[i-1])\n        for i in range(1, len2+1):\n            dp[0][i] = (dp[0][i-1] and s2[i-1] == s3[i-1])\n        for i in range(1, len1+1):\n            for j in range(1,len2+1):\n                dp[i][j]= (dp[i][j-1] and s2[j-1] == s3[i+j-1]) or (dp[i-1][j] and s1[i-1]==s3[i+j-1])\n        return dp[-1][-1]\n\n</code></pre> <p>121 \u4e70\u5356\u80a1\u7968</p> <pre><code>def max_profit_with_days(prices):\n    if not prices:\n        return 0, None, None\n\n    min_price = prices[0]\n    max_profit = 0\n    buy_day = 0\n    sell_day = 0\n\n    for i, price in enumerate(prices):\n        if price &lt; min_price:\n            min_price = price\n            buy_day = i\n        current_profit = price - min_price\n        if current_profit &gt; max_profit:\n            max_profit = current_profit\n            sell_day = i\n\n    return max_profit, prices[buy_day], prices[sell_day]\n</code></pre> <p>121 \u4e70\u5356\u80a1\u7968</p> <pre><code>//DP\u601d\u60f3\nfunc maxProfit(prices []int) int {\n    profit := 0\n    buyPrice := prices[0]\n    for i :=1 ; i&lt; len(prices); i++ {\n\n        if p := prices[i] - buyPrice; p &gt; profit {\n            profit = p\n        }\n        if prices[i] &lt; buyPrice {\n            buyPrice = prices[i]\n        }\n    }\n    return profit\n}\n</code></pre> <p>122 \u4e70\u5356\u80a1\u79682 -- \u8d2a\u5fc3\u7b97\u6cd5</p> <pre><code>// \u53ea\u8981\u4eca\u5929\u6bd4\u6628\u5929\u8d35\u5c31\u5356\nfunc maxProfit(prices []int) int {\n    profit := 0\n    for i:=1; i&lt; len(prices); i++ {\n        if prices[i] &gt; prices[i-1] {\n            profit += prices[i] - prices[i-1]\n        }\n    }\n    return profit\n}\n\ndef maxProfit(self, prices: List[int]) -&gt; int:\n        #\u4ece\u7b2c\u4e8c\u5929\u5f00\u59cb\uff0c\u5982\u679c\u5f53\u5929\u80a1\u4ef7\u5927\u4e8e\u524d\u4e00\u5929\u80a1\u4ef7\uff0c\u5219\u5728\u524d\u4e00\u5929\u4e70\u5165\uff0c\u5f53\u5929\u5356\u51fa\uff0c\u5373\u53ef\u83b7\u5f97\u5229\u6da6\u3002\u5982\u679c\u5f53\u5929\u80a1\u4ef7\u5c0f\u4e8e\u524d\u4e00\u5929\u80a1\u4ef7\uff0c\u5219\u4e0d\u4e70\u5165\uff0c\u4e0d\u5356\u51fa\u3002\u4e5f\u5373\u662f\u8bf4\uff0c\u6240\u6709\u4e0a\u6da8\u4ea4\u6613\u65e5\u90fd\u505a\u4e70\u5356\uff0c\u6240\u6709\u4e0b\u8dcc\u4ea4\u6613\u65e5\u90fd\u4e0d\u505a\u4e70\u5356\uff0c\u6700\u7ec8\u83b7\u5f97\u7684\u5229\u6da6\u6700\u5927\n\n        profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] &gt; prices[i-1]:\n                profit += prices[i] - prices[i-1]\n        return profit\n</code></pre> <pre><code>\n</code></pre> <p>45 \u8df3\u8dc3\u6e38\u620f 2 -\u8d2a\u5fc3\u7b97\u6cd5</p> <pre><code>class Solution:\n    def jump(self, nums: List[int]) -&gt; int:\n        #\u6b63\u5411\u8fb9\u754c\u8d2a\u5fc3\u8df3\u8d8a\n        maxP, end, st = 0, 0, 0\n        for i in range(len(nums) -1):\n            if maxP &gt;= i:\n                maxP = max(maxP, i + nums[i])\n                if i == end:\n                    end = maxP\n                    st += 1\n        return st\n\n</code></pre> <p>322 \u96f6\u94b1\u5151\u6362 - \u80cc\u5305\u95ee\u9898</p> <pre><code>//\u7c7b\u4f3c\u80cc\u5305\u95ee\u9898\uff0c\u53ef\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\n//\u8f6c\u79fb\u65b9\u7a0b\uff1a f(n) = min(f(n - c1), f(n - c2), ... f(n - cn)) + 1\nfunc coinChange(coins []int, amount int) int {\n    if coins == nil || len(coins) == 0 {\n        return -1\n    }\n    res := make([]int, amount+1)\n    for i:=1; i &lt; amount+1; i++ {\n        res[i] = math.MaxInt32\n        for _, v := range coins {\n            if i - v &gt;= 0 {\n                res[i] = min(res[i], res[i-v]+1)   \n            }\n        }\n    }\n\n    if res[amount] == math.MaxInt32 {\n        return -1\n    }\n    return res[amount]\n}\n</code></pre> <p>AcWing 487 \u91d1\u660e\u7684\u9884\u7b97\u65b9\u6848</p> <pre><code>v, w = [], []\nfor i in range(n):\n  x=[int(j) for j in input().split()]\n  v.append(x[0])\n  w.append(x[1])\n\ndef max_buy(w, v):\n  # \u8d2d\u4e70\u6570\u91cf\uff0c\u603b\u94b1\u6570\n  n, m = w[0], v[0] \n  f = [[0] * (m+1) for _ in range(n+1)]\n  for i in range(1, n+1):\n    val = v[i]*w[i]\n    for j in range(1, m+1):\n      f[i][j] = f[i-1][j]\n      if j &gt;= v[i]:\n        f[i][j] = max(f[i][j], f[i-1][j-v[i]]+val)\n    return f[n][m]\n</code></pre>"},{"location":"algorithms/#sliding-window","title":"Sliding window","text":"<p>239 \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c</p> <p>\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\u5b58\u50a8\u6700\u5927\u503c</p> <pre><code>func maxSlidingWindow(nums []int, k int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n\n    //\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u5207\u7247\n    window := make([]int, 0)\n    res := make([]int, 0)\n    for i:=0; i&lt;len(nums); i++ {\n        //\u5faa\u73af\u5220\u9664\u7ef4\u62a4\u961f\u5217\u5c3e\u90e8\u6700\u5c0f\u5143\u7d20\u5982\u679c\u5176\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\n        for i&gt;0 &amp;&amp; len(window)&gt;0 &amp;&amp; nums[i] &gt; window[len(window)-1] {\n            window = window[:len(window)-1]\n        }\n\n        window = append(window, nums[i])\n        //\u5982\u679c\u7a97\u53e3\u5c3e\u7aef\u503c\u4e3a\u6700\u5927\u503c\uff0c\u63a8\u51fa\u7ef4\u62a4\u961f\u5217\n        if i &gt;= k &amp;&amp; nums[i-k] == window[0] {\n            window = window[1:]\n        }\n\n        //\u5c06\u5f53\u524d\u6700\u5927\u503c\u5199\u5165\u7ed3\u679c\n        if i &gt;= k-1 {\n            res = append(res, window[0])\n        } \n    }\n    return res\n}\n</code></pre> <p>3 \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 </p> <pre><code>func lengthOfLongestSubstring(s string) int {\n    byt := []byte(s)\n    if len(byt) == 0 {\n        return 0\n    }\n    hmap := make(map[byte]int) \n    res := 0\n    start := 0\n    for i:=0; i&lt;len(byt); i++ {\n        if _, ok := hmap[byt[i]]; ok {\n            start = max(start, hmap[byt[i]] + 1) //\u6709\u91cd\u590d\u5b57\u7b26\u63a8\u8fdb\u7ef4\u62a4\u7a97\u53e3\n        }\n        hmap[byt[i]] = i  //\u66f4\u65b0map \u5b58index\uff0ckey\u4e3a\u5b57\u7b26\n        res = max(res, i - start + 1) \n    }\n    return res\n}\n\nfunc max(x, y int) int {\n    if x &gt; y {\n        return x\n    }\n    return y\n}\n</code></pre> <p>713 \u4e58\u79ef\u5c0f\u4e8eK\u5b50\u6570\u7ec4</p> <pre><code>func numSubarrayProductLessThanK(nums []int, k int) int {\n    //corner case\n    if len(nums)==0 || k == 0 || k==1 {\n        return 0\n    }\n    //\u6ed1\u52a8\u7a97\u53e3\u53cc\u6307\u9488\n    l, product, res := 0, 1, 0\n    for r:=0; r&lt;len(nums); r++ {\n        product *= nums[r]\n        for product &gt;= k {\n            product /= nums[l]\n            l += 1\n        }\n        res += r-l+1\n    }\n    return res\n}\n</code></pre> <p>209 \u957f\u5ea6\u6700\u5c0f\u5b50\u6570\u7ec4</p> <pre><code>func minSubArrayLen(target int, nums []int) int {\n    //corner case\n    if len(nums) == 0 || nums == nil {\n        return 0\n    }\n    //\u6ed1\u52a8\u7a97\u53e3\n    //golang\u6700\u5927\u6570\u8868\u8fbe int(^uint(0) &gt;&gt; 1)\n    res, sum, l, length := int(^uint(0) &gt;&gt; 1), 0, 0, 0\n\n    for r:=0; r&lt;len(nums); r++ {\n        sum += nums[r]\n        for sum &gt;= target {\n            //length\n            length = r-l+1\n            if res &gt; length {\n                res = length\n            }\n            sum -= nums[l] //\u4e0d\u65ad\u8c03\u6574\u8d77\u59cb\u70b9\u4f4d\u7f6e\n            l += 1\n        }\n    }\n    if res == int(^uint(0) &gt;&gt; 1) {\n        return 0\n    } else {\n        return res\n    }\n}\n</code></pre>"},{"location":"algorithms/#backtracking","title":"Backtracking","text":"<p>\u5168\u6392\u5217 46/47 </p> <pre><code>class Solution:\n    def permute(self, nums: List[int]) -&gt; List[List[int]]:\n        res = []  \n        path = []\n        def backtrack(nums):\n            if len(path) == len(nums):\n                return res.append(path[:])  #\u627e\u5230\u4e86\u4e00\u7ec4\n            for i in range(0,len(nums)):\n                if nums[i] in path:  #path\u5df2\u7ecf\u6536\u5f55\u7684\u5143\u7d20\uff0c\u8df3\u8fc7\n                    continue\n                path.append(nums[i])\n                backtrack(nums)  #\u9012\u5f52\n                path.pop()  #\u56de\u6eaf\n        backtrack(nums)\n        return res\n</code></pre> <p>22 \u62ec\u53f7\u751f\u6210</p> <pre><code>class Solution:\n    def generateParenthesis(self, n: int) -&gt; List[str]: \n        ans = []\n        path = []\n        def backtrack(left,right):\n            '''\n            left = 0 # \u5de6\u62ec\u53f7\u6570\n            right = 0 # \u53f3\u62ec\u53f7\u6570\n            '''\n            if len(path) == 2*n :\n                ans.append(\"\".join(path))\n                return\n            # \u53f3\u62ec\u53f7\u662f\u5426\u53ef\u9009\u4e3a\uff1a left-right &gt; 0 ? \u53ef\u9009\u53f3:\u4e0d\u53ef\u9009\n            if left - right &gt; 0:\n                path.append(\")\")\n                backtrack(left, right+1)\n                path.pop()\n\n            # \u5de6\u62ec\u53f7\u662f\u5426\u53ef\u9009\u4e3a\uff1a n - left &gt; 0? \u53ef\u9009\u5de6\uff1a\u4e0d\u53ef\u9009\n            if n - left &gt; 0:\n                path.append(\"(\")\n                backtrack(left+1, right)\n                path.pop()\n        backtrack(0,0)\n        return ans\n</code></pre> <p>78 \u5b50\u96c6</p> <pre><code>//\u904d\u5386\uff0c\u9047\u5230\u4e00\u4e2a\u6570\u5c31\u628a\u6240\u6709\u5b50\u96c6\u52a0\u4e0a\u8be5\u6570\u7ec4\u6210\u65b0\u7684\u5b50\u96c6\nfunc subsets(nums []int) [][]int {\n    res := make([][]int, 1, int(math.Pow(2, float64(len(nums)))) + 1)\n    res[0] = []int{}\n    for _, ar := range nums {\n        for _, v := range res {\n            newV := make([]int, len(v), len(v)+1)\n            //\u4e0d\u80fd\u76f4\u63a5append\u7f16\u8f91res,\u56e0\u4e3a\u4f1a\u6539\u53d8res\u6240\u6307\u5411\u7684\u5185\u5b58\u5730\u5740\n            //\u6df1\u62f7\u8d1d\u4e00\u4e2anewV\u518dappend\n            copy(newV, v)\n            res = append(res, append(newV, ar))\n        }\n    }\n    return res\n}\n</code></pre> <p>90 \u5b50\u96c62 - \u56de\u6eaf</p> <pre><code>func subsetsWithDup(nums []int) (res [][]int) {\n    var dfs func(temp []int, idx int)\n    n := len(nums)\n    sort.Ints(nums)\n    dfs = func(temp []int, idx int) {\n        res = append(res, append([]int(nil), temp...))\n        for i := idx; i &lt; n; i++ {\n            if i &gt; idx &amp;&amp; nums[i] == nums[i-1] {\n                continue\n            }\n            temp = append(temp, nums[i])\n            dfs(temp, i+1)\n            temp = temp[:len(temp)-1]\n        }\n    }\n    dfs([]int{}, 0)\n    return\n}\n</code></pre>"},{"location":"algorithms/#others","title":"Others","text":"<p>\u4f4d\u8fd0\u7b97 </p> <p>136 2N+1 \u627e1</p> <pre><code>class Solution {\n    public int singleNumber(int[] nums) {\n        int res = 0;\n        for(int i=0; i &lt; nums.length; i++) {\n            res = res^nums[i];\n        }\n        return res;\n    }\n}\n</code></pre> <p>2N \u627e 2\u4e2a\u4e0d\u91cd\u590d\u7684</p> <p>\u89e31.\u54c8\u5e0c\u6570\u7ec4\u8f6c\u5b58\uff0c\u503c\u5f53\u4e0b\u6807\uff0c\u6b21\u6570\u5f53value\uff0c\u6700\u540e\u904d\u5386\u51favalue\u4e3a1\u7684\u7ed3\u679c\u3002</p> <p>\u89e32. \u5168\u90e8\u5f02\u6216\u540e\uff0c\u6839\u636e\u7ed3\u679c\u4f4d\u5206\u4e24\u7ec4\u518d\u5f02\u6216\uff0c\u7ed3\u679c\u5c31\u662f\u4e24\u4e2a\u4e0d\u91cd\u590d\u7684\u6570\u3002</p> <pre><code>    public int[] singleNumber(int[] nums) {\n        int [] res = new int[2];\n        int tmp = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            tmp ^= nums[i];\n        }\n\n        int temp = lowbit(tmp);\n        for (int i = 0; i &lt; nums.length; i++) {\n            if((temp &amp; nums[i]) == 0) res[0] ^= nums[i];\n            else res[1] ^= nums[i];\n        }\n        return res;\n\n    }\n    public int lowbit(int x){\n        return x &amp; -x;\n    }\n</code></pre> <p>212 \u627e\u91cd\u590d List Set HashTable</p> <pre><code>func containsDuplicate(nums []int) bool {\n    set := map[int]struct{}{}  //\u7528map\u6a21\u62dfset, \u8d4b\u4e88\u7a7a\u7ed3\u6784\u4f53\n    for _, v := range nums {\n        if _, has := set[v]; has {\n            return true\n        }\n        set[v] = struct{}{}\n    }\n    return false\n}\n</code></pre> <p>349 \u6c42\u4e24\u4e2a\u65e0\u5e8f\u6570\u7ec4\u4ea4\u96c6 - &gt;\u54c8\u5e0c\u8868     \u5ef6\u4f38\uff1a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4ea4\u96c6-&gt;\u53cc\u6307\u9488\u4e00\u6b21\u904d\u5386</p> <pre><code>func intersection(nums1 []int, nums2 []int) []int {\n    mp := make(map[int]int)\n    res := make([]int, 0)\n    for _, v := range nums1 {\n        if mp[v] == 0 {\n            mp[v]++\n        } \n    }\n    for _, v := range nums2 {\n        if mp[v] == 1 {\n            res = append(res, v)\n            mp[v]--\n        }\n    }\n    return res\n}\n</code></pre> <p>5 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e2d\u5fc3\u6269\u6563\u6cd5  647\u9898\u7c7b\u4f3c</p> <pre><code>func longestPalindrome(s string) string {\n    if s == \"\" || len(s) == 0 {\n            return \"\";\n        }\n    start, end := 0, 0\n    maxS := 0\n    maxLen := 0\n    length := 1\n    for k:=0; k&lt;len(s); k++ {\n        start, end = k-1, k+1\n        //\u5411\u5de6\u6269\u6563\n        for start &gt;= 0 &amp;&amp; s[start] == s[k] {\n            start--\n            length++\n        }\n        //\u5411\u53f3\u6269\u6563\n        for end &lt; len(s) &amp;&amp; s[end] == s[k] {\n            end++\n            length++\n        }\n        //\u5411\u4e24\u8fb9\u540c\u65f6\u6269\u6563\n        for start &gt;= 0 &amp;&amp; end &lt; len(s) &amp;&amp; s[start] == s[end] {\n            start--\n            end++\n            length += 2\n        }\n        //\u66f4\u65b0\u6700\u5927\u56de\u6587len\u548cindexs\n        if length &gt; maxLen {\n            maxLen = length\n            maxS = start\n        }\n        //\u91cd\u7f6e\u957f\u5ea6\n        length = 1\n    }\n    return s[maxS+1 : maxS+maxLen+1]\n}\n</code></pre> <pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        if len(s) == 1: return s\n        max_len = 0\n        leng = 1\n        max_s = 0\n        for k in range(len(s)):\n            l = k-1\n            r = k+1\n            while l&gt;=0 and s[l]==s[k]:\n                l-=1\n                leng+=1\n\n            while r&lt;len(s) and s[r]==s[k]:\n                r+=1\n                leng+=1\n\n            while l&gt;=0 and r&lt; len(s) and s[l]==s[r]:\n                l-=1\n                r+=1\n                leng+=2\n\n            if leng &gt; max_len:\n                max_len = leng\n                max_s = l\n            leng = 1\n        return s[max_s+1:max_s+max_len+1]\n</code></pre> <p>\u5b9e\u73b0 LRU \u7f13\u5b58 Python</p>"},{"location":"go-microservice-devops/","title":"GO micro service project DevOps","text":"<p>github code</p>"},{"location":"go-microservice-devops/#ddd-domain-driven-design","title":"DDD: Domain Driven Design","text":"<ul> <li> <p>\u4e0d\u8981\u6570\u636e\u9a71\u52a8\u6216\u754c\u9762\u9a71\u52a8</p> </li> <li> <p>\u5fae\u670d\u52a1\u8981\u754c\u9650\u6e05\u6670\uff0c \u804c\u80fd\u6e05\u6670\u7684\u5206\u5c42\uff0c \u63a7\u5236\u5408\u9002\u7684\u7c92\u5ea6\u800c\u4e0d\u662f\u8fc7\u5ea6\u7684\u62c6\u5206</p> </li> <li> <p>\u56db\u5c42\u67b6\u6784:  Interface -&gt; Application -&gt; Domain -&gt; Infrastructure</p> </li> </ul> <p></p>"},{"location":"go-microservice-devops/#micro-basics","title":"Micro basics","text":"<p>gRPC server(service)   -&gt; Proto Request (response) -&gt; gRpc stub(client)</p> <p>Protocal Buffers:  \u8f7b\u4fbf\u9ad8\u6548\u7684\u5e8f\u5217\u5316\u7ed3\u6784\u5316\u6570\u636e\u7684\u534f\u8bae</p> <p></p>"},{"location":"go-microservice-devops/#go-micro-framework","title":"go-micro framework","text":"<ol> <li>\u63d0\u4f9b\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6838\u5fc3\u5e93</li> <li>\u5bf9\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u9ad8\u5ea6\u62bd\u8c61</li> <li>\u53ef\u63d2\u62d4\u7684\u67b6\u6784\uff0c\u6309\u9700\u4f7f\u7528</li> </ol>"},{"location":"go-microservice-devops/#_1","title":"\u7ec4\u4ef6\uff1a","text":"<ol> <li>\u6ce8\u518c\uff1a\u670d\u52a1\u53d1\u73b0</li> <li>\u9009\u62e9\u5668\uff1a\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861</li> <li>\u4f20\u8f93\uff1a\u670d\u52a1\u95f4\u901a\u8baf</li> <li>Broker\uff1a\u63d0\u4f9b\u5f02\u6b65\u901a\u8baf\u7684\u6d88\u606f\u53d1\u5e03/\u8ba2\u9605\u63a5\u53e3</li> <li>\u7f16\u7801Codec\uff1a \u6d88\u606f\u4f20\u8f93\u5230\u4e24\u7aef\u7684\u7f16\u7801\u89e3\u7801</li> <li>Server, Client</li> </ol>"},{"location":"go-microservice-devops/#consul","title":"\u6ce8\u518c\u914d\u7f6e\u4e2d\u5fc3 Consul","text":"<p>\u670d\u52a1\u7f51\u683c\u89e3\u51b3\u65b9\u6848\uff1a </p>"},{"location":"go-microservice-devops/#_2","title":"\u5173\u952e\u529f\u80fd\uff1a","text":"<p>\u670d\u52a1\u53d1\u73b0/\u5065\u5eb7\u68c0\u67e5/</p> <p>\u952e\u503c\u5bf9\u5b58\u50a8\uff1a\u952e\u503c\u5b58\u50a8\u53ef\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\u2014&gt; \u52a8\u6001\u914d\u7f6e\uff0c\u529f\u80fd\u6807\u8bb0\uff0c\u534f\u8c03\uff0c\u9886\u5bfc\u8005\u7ade\u9009</p> <p>\u5b89\u5168\u670d\u52a1\u901a\u4fe1\uff1a Consul\u53ef\u4e3a\u670d\u52a1\u751f\u6210\u5206\u53d1TLS\u8bc1\u4e66\uff0c\u5efa\u7acb\u76f8\u5e94\u7684TLS\u8fde\u63a5</p> <p>\u652f\u6301\u591a\u6570\u636e\u4e2d\u5fc3</p>"},{"location":"go-microservice-devops/#gossip-protocol","title":"Gossip Protocol","text":"<p>\u5c40\u57df\u7f51Lan Pool</p> <ul> <li>Client \u81ea\u52a8\u53d1\u73b0Server\u8282\u70b9\uff0c \u51cf\u5c11\u914d\u7f6e\u91cf</li> <li>\u5206\u5e03\u5f0f\u6545\u969c\u68c0\u6d4b \u5728\u51e0\u4e2aserver\u4e0a\u6267\u884c</li> <li>\u5feb\u901f\u5e7f\u64ad\u4e8b\u4ef6</li> </ul> <p>\u5e7f\u57df\u7f51Wan Pool</p> <ul> <li>Wan pool \u5168\u5c40\u552f\u4e00</li> <li>\u4e0d\u540c\u6570\u636e\u4e2d\u5fc3\u7684server\u90fd\u4f1a\u52a0\u5165WAN pool</li> <li>\u5141\u8bb8\u670d\u52a1\u5668\u6267\u884c\u8de8\u6570\u636e\u4e2d\u5fc3\u8bf7\u6c42</li> </ul>"},{"location":"go-microservice-devops/#raft-protocol","title":"Raft Protocol\uff1a \u9009\u4e3e\u534f\u8bae","text":""},{"location":"go-microservice-devops/#_3","title":"\u5fae\u670d\u52a1\u94fe\u8def\u8ffd\u8e2a","text":"<p>Jaeger\u7684\u4f5c\u7528\uff1a \u76d1\u89c6\u548c\u8bca\u65ad\u57fa\u4e8e\u5fae\u670d\u52a1\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf</p> <p>\u4e3b\u8981\u7279\u6027\uff1a\u9ad8\u6269\u5c55\u6027,  \u539f\u751f\u652f\u6301OpenTracing, \u53ef\u89c2\u6d4b\u6027</p> <p>\u672f\u8bedSpan\uff1a</p> <ul> <li> <p>Jaeger\u7684\u903b\u8f91\u5de5\u4f5c\u5355\u5143</p> </li> <li> <p>\u5177\u6709\u64cd\u4f5c\u540d\u79f0\uff0c\u5f00\u59cb\u65f6\u95f4\u548c\u6301\u7eed\u65f6\u95f4</p> </li> <li> <p>\u8de8\u5ea6\u53ef\u4ee5\u5d4c\u5957\u6392\u5e8f\u5e76\u5efa\u7acb\u56e0\u679c\u5173\u7cfb\u6a21\u578b</p> </li> </ul> <p>\u672a\u5b8c\u5f85\u7eed....</p> <p>working on it!</p> <p>\u7194\u65ad\uff0c\u9650\u6d41\uff0c\u8d1f\u8f7d\u5747\u8861</p> <p>\u76d1\u63a7\u80fd\u529b\u5b8c\u5584</p> <p>\u670d\u52a1\u7ea7\u89c2\u6d4b\u53f0</p> <p>k8s</p>"},{"location":"go-shopping-practice/","title":"GO high performance flash sale system","text":"<p>github code</p>"},{"location":"go-shopping-practice/#requirements-analysis","title":"Requirements analysis","text":"<ul> <li>\u524d\u7aef\u9875\u9762\u9700\u8981\u627f\u8f7d\u5927\u6d41\u91cf</li> <li>\u5927\u5e76\u53d1\u72b6\u6001\u8981\u89e3\u51b3\u8d85\u5356\u95ee\u9898</li> <li>\u540e\u7aef\u63a5\u53e3\u8981\u53ef\u4ee5\u65b9\u4fbf\u7684\u6a2a\u5411\u6269\u5c55</li> <li>\u63d0\u9ad8\u7f51\u7ad9\u6027\u80fd\uff0c\u4fdd\u62a4\u6570\u636e\u5e93</li> </ul>"},{"location":"go-shopping-practice/#system-design","title":"System design","text":"<p>CDN - &gt; \u6d41\u91cf\u8d1f\u8f7d - &gt; \u6d41\u91cf\u62e6\u622a\uff0c\u5206\u5e03\u5f0f\u6743\u9650\u9a8c\u8bc1-&gt; \u5206\u5e03\u5f0f\u6570\u91cf\u63a7\u5236 </p> <p>-&gt; \u540e\u7aef\u96c6\u7fa4 - &gt; RabbitMQ(\u5f02\u6b65\u4e0b\u5355) - &gt; \u961f\u5217\u6d88\u8d39(\u6392\u961f\u5199\u5165) - &gt; MySql</p> <p>\u79d2\u6740\u7cfb\u7edf\uff1a\uff08\u8d85\u9ad8\u5e76\u53d1\uff0c\u9650\u6d41\uff0c\u524a\u5cf0\uff0c\u7ef4\u6301\u53ef\u7528\uff09</p> <ol> <li> <p>\u4e1a\u52a1\u4e0a \u9650\u6d41\uff08\u5206\u6563\u65f6\u95f4\uff0c\u533a\u522b\u7528\u6237\uff0c\u70b9\u51fb\u95e8\u69db\uff09</p> </li> <li> <p>\u6280\u672f\u4e0a \u6297\u538b </p> </li> <li>\u76d1\u63a7\u5982\u8fbe\u5230\u538b\u529b\u6d4b\u8bd5\u7684\u6781\u9650QPS, \u76f4\u63a5\u8fd4\u56de\u5df2\u62a2\u5b8c</li> <li>\u63d0\u9ad8\u670d\u52a1\u5668\u6570\u91cf\u6027\u80fd</li> <li>\u5206\u5c42\u6548\u9a8c\uff1a\u8bfb\u53ef\u5f31\u4e00\u81f4\u6027\u6548\u9a8c\uff0c\u5199\u5f3a\u4e00\u81f4\u6027</li> <li>\u7528\u6d88\u606f\u961f\u5217\u7f13\u51b2\u8bf7\u6c42</li> </ol>"},{"location":"go-shopping-practice/#rabbitmq","title":"RabbitMQ","text":"<p>\u7b80\u5355\u6a21\u5f0f/\u5de5\u4f5c\u6a21\u5f0f/\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f/\u8def\u7531\u6a21\u5f0f/Topic\u6a21\u5f0f</p> <p>Code :  Github</p>"},{"location":"go-shopping-practice/#iris-framework","title":"IRIS Framework","text":"<p>\u7b80\u5355\u524d\u7aef\u6a21\u677f -&gt; Done</p> <p>\u7528\u6237\u6ce8\u518c\u767b\u9646\u6a21\u5757 -&gt; Done</p> <p>\u4ea7\u54c1\u6a21\u5757 -&gt; Done</p> <p>\u8ba2\u5355\u6a21\u5757 -&gt; Done</p> <p>\u57fa\u672c\u670d\u52a1\u67b6\u6784\u5b8c\u6210</p>"},{"location":"go-shopping-practice/#performance-optimization","title":"Performance optimization","text":"<ul> <li>\u524d\u7aef\u9875\u9762\u9759\u6001\u5316\u52a0CDN</li> <li>SLB - \u6d41\u91cf\u8d1f\u8f7d\u5747\u8861</li> <li>\u5206\u5e03\u5f0f\u5b89\u5168\u9a8c\u8bc1 - \u6d41\u91cf\u62e6\u622a</li> <li>\u79d2\u6740\u6570\u91cf\u63a7\u5236 - \u9632\u6b62\u8d85\u5356\uff0c\u589e\u52a0\u6027\u80fd</li> <li>RabbitMQ - \u6d88\u606f\u961f\u5217, \u9632\u6b62Mysql\u7206\u5e93</li> </ul> <p>\u4e00\u81f4\u6027hash\u7b97\u6cd5: </p> <p>\u7528\u4e8e\u5feb\u901f\u5b9a\u4f4d\u8d44\u6e90\uff0c\u5747\u5300\u5206\u5e03 -&gt; \u5206\u5e03\u5f0f\u5b58\u50a8\uff0c\u5206\u5e03\u7f13\u5b58, \u8d1f\u8f7d\u5747\u8861</p> <p>Redis \u5b58\u5728\u7684\u74f6\u9888: </p> <p>\u5355\u673aQPS - 8W\u5de6\u53f3\uff0c\u96c6\u7fa4QPS - \u5343\u4e07\u7ea7 \uff0c\u5206\u5e03\u5f0f - \u5343\u4e07\u7ea7</p> <p>\u4f46\u662f\u5bf9\u4e8e\u5355\u4e2a\u5546\u54c1\u8d85\u9ad8\u6d41\u91cf\u7684\u60c5\u51b5\uff0c\u4f7f\u7528\u96c6\u7fa4\u548c\u5206\u5e03\u5f0f\u5e76\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898</p>"},{"location":"golang/","title":"Go programing language","text":""},{"location":"golang/#basic","title":"Basic","text":"<ul> <li>Variable declaration</li> </ul> <pre><code>s := \"\"\nvar s string\nvar s = \"\"\nvar s string = \"\"\nvar identifier []type\nslic := make([]int,len)\nmap_variable := make(map[key_data_type]value_data_type)\n</code></pre> <p>\u7b2c\u4e00\u79cd\u5f62\u5f0f\uff0c\u662f\u4e00\u6761\u77ed\u53d8\u91cf\u58f0\u660e\uff0c\u6700\u7b80\u6d01\uff0c\u4f46\u53ea\u80fd\u7528\u5728\u51fd\u6570\u5185\u90e8\uff0c\u800c\u4e0d\u80fd\u7528\u4e8e\u5305\u53d8\u91cf\u3002 \u7b2c\u4e8c\u79cd\u5f62\u5f0f\u4f9d\u8d56\u4e8e\u5b57\u7b26\u4e32\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u96f6\u503c\u673a\u5236\uff0c\u88ab\u521d\u59cb\u5316\u4e3a\"\"\u3002 \u7b2c\u4e09\u79cd\u5f62\u5f0f\u7528\u5f97\u5f88\u5c11\uff0c\u9664\u975e\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u53d8\u91cf\u3002 \u7b2c\u56db\u79cd\u5f62\u5f0f\u663e\u5f0f\u5730\u6807\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u5f53\u53d8\u91cf\u7c7b\u578b\u4e0e\u521d\u503c\u7c7b\u578b\u76f8\u540c\u65f6\uff0c\u7c7b\u578b\u5197\u4f59\uff0c\u4f46\u5982\u679c\u4e24\u8005\u7c7b\u578b\u4e0d\u540c\uff0c\u53d8\u91cf\u7c7b\u578b\u5c31\u5fc5\u987b\u4e86\u3002\u5b9e\u8df5\u4e2d\u4e00\u822c\u4f7f\u7528\u524d\u4e24\u79cd\u5f62\u5f0f\u4e2d\u7684\u67d0\u4e2a\uff0c\u521d\u59cb\u503c\u91cd\u8981\u7684\u8bdd\u5c31\u663e\u5f0f\u5730\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u5426\u5219\u4f7f\u7528\u9690\u5f0f\u521d\u59cb\u5316\u3002</p> <ul> <li>For loop</li> </ul> <pre><code>for key, value := range oldMap {\n    newMap[key] = value\n}\n</code></pre> <ul> <li>Binary operator</li> </ul> <pre><code>//Go\u8bed\u8a00\u4e2d\u7b97\u672f\u8fd0\u7b97\u3001\u903b\u8f91\u8fd0\u7b97\u548c\u6bd4\u8f83\u8fd0\u7b97\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\n//\u5b83\u4eec\u6309\u7167\u5148\u7ea7\u9012\u51cf\u7684\u987a\u5e8f\u7684\u6392\u5217\uff1a\n* / % &lt;&lt; &gt;&gt; &amp; &amp;^\n+ - | ^\n== != &lt; &lt;= &gt; &gt;=\n&amp;&amp;\n||\n</code></pre> <ul> <li>string &amp;&amp; byte &amp;&amp; rune</li> </ul> <p>\u4e92\u76f8\u8f6c\u6362</p> <pre><code>// string to []byte\ns1 := \"string\"\nby := []byte(s1)\n\n// []byte to string\ns2 := string(by)\n\n\n//string \u8f6c rune\nr := []rune(str)\n\n//rune \u8f6c string\nstr = string(r)\n</code></pre> <p>\u9ed1\u9b54\u6cd5\u8f6c\u6362 - \u6027\u80fd\u66f4\u4f18</p> <pre><code>func String2Bytes(s string) []byte {\n    sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))\n    bh := reflect.SliceHeader{\n        Data: sh.Data,\n        Len:  sh.Len,\n        Cap:  sh.Len,\n    }\n    return *(*[]byte)(unsafe.Pointer(&amp;bh))\n}\n\nfunc Bytes2String(b []byte) string {\n    return *(*string)(unsafe.Pointer(&amp;b))\n}\n</code></pre> <p>\u4ecego\u6e90\u7801\u6765\u770b\uff0cstring\u5176\u5b9e\u662f\u4e00\u4e2a\u6307\u5411byte\u6570\u7ec4\u7684\u6307\u9488\u3002</p> <p>\u5b57\u7b26\u4e32string\u662f\u4e0d\u53ef\u66f4\u6539\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u7ed9\u4ed6\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\uff0c\u7ed9\u6307\u9488\u91cd\u65b0\u8d4b\u503c\u3002\u4f46\u662f\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u4ed6\u6548\u7387\u4f4e\u4e0b\uff0c\u56e0\u4e3a\u4e4b\u524d\u7684\u7a7a\u95f4\u9700\u8981\u88abgc\u56de\u6536\u3002</p> <pre><code>s := \"A1\" // \u5206\u914d\u5b58\u50a8\"A1\"\u7684\u5185\u5b58\u7a7a\u95f4\uff0cs\u7ed3\u6784\u4f53\u91cc\u7684str\u6307\u9488\u6307\u5411\u8fd9\u5feb\u5185\u5b58\ns = \"A2\"  // \u91cd\u65b0\u7ed9\"A2\"\u7684\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0cs\u7ed3\u6784\u4f53\u91cc\u7684str\u6307\u9488\u6307\u5411\u8fd9\u5feb\u5185\u5b58\n</code></pre> <p>\u800c []byte\u548cstring\u7684\u5dee\u522b\u662f\u66f4\u6539\u53d8\u91cf\u7684\u65f6\u5019array\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u66f4\u6539\u3002</p> <pre><code>s := []byte{1} // \u5206\u914d\u5b58\u50a81\u6570\u7ec4\u7684\u5185\u5b58\u7a7a\u95f4\uff0cs\u7ed3\u6784\u4f53\u7684array\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u6570\u7ec4\u3002\ns = []byte{2}  // \u5c06byte array\u7684\u5185\u5bb9\u6539\u4e3a2\n</code></pre> <pre><code>// rune\u80fd\u8868\u793a\u7684\u8303\u56f4\u66f4\u591a\uff0c\u6bd4\u5982\u4e2d\u6587(\u53603\u4e2a\u5b57\u7b26)\n    str2:=\"\u4f60\u597d,\u4e2d\u56fd\"\n    c:=[]rune(str2)\n    d:=[]byte(str2)\n    //c: [20320 22909 44 20013 22269]  \u4e2d\u6587\u5b57\u7b26\u4e5f\u80fd\u62c6\n    fmt.Println(\"c:\",c) \n    //d: [228 189 160 229 165 189 44 228 184 173 229 155 189]  \u4e00\u4e2a\u4e2d\u6587\u62c6\u62103\u4e2a\u5b57\u7b26\u8868\u793a4*3+1=13\n    fmt.Println(\"d:\",d) \n}\n</code></pre> <pre><code>//\u7f16\u8f91\u4fee\u6539\u5b57\u7b26\u4e32string \u6700\u597d\u7528rune \u56e0\u4e3a\u4e00\u4e2a UTF8 \u7f16\u7801\u7684\u5b57\u7b26\u53ef\u80fd\u4f1a\u5360\u591a\u4e2a\u5b57\u8282\nx := \"text\"\nxRunes := []rune(x)\nxRunes[0] = '\u4eba'\nx = string(xRunes)\nfmt.Println(x)    // \u4ebaext\n</code></pre> <p>\u603b\u7ed3\uff1a</p> <ul> <li>byte \u7b49\u540c\u4e8eint8\uff0c\u5e38\u7528\u6765\u5904\u7406ascii\u5b57\u7b26</li> <li> <p>rune \u7b49\u540c\u4e8eint32\uff0c\u5e38\u7528\u6765\u5904\u7406unicode\u6216utf-8\u5b57\u7b26</p> </li> <li> <p>string\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83\uff0c\u800c[]byte\u4e0d\u53ef\u4ee5\uff0c\u6240\u4ee5[]byte\u4e0d\u53ef\u4ee5\u5f53map\u7684key\u503c\u3002</p> </li> <li> <p>\u56e0\u4e3a\u65e0\u6cd5\u4fee\u6539string\u4e2d\u7684\u67d0\u4e2a\u5b57\u7b26\uff0c\u9700\u8981\u7c92\u5ea6\u5c0f\u5230\u64cd\u4f5c\u4e00\u4e2a\u5b57\u7b26\u65f6\uff0c\u7528[]byte\u3002</p> </li> <li>string\u503c\u4e0d\u53ef\u4e3anil\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u8981\u901a\u8fc7\u8fd4\u56denil\u8868\u8fbe\u989d\u5916\u7684\u542b\u4e49\uff0c\u5c31\u7528[]byte\u3002</li> <li>[]byte\u5207\u7247\u8fd9\u4e48\u7075\u6d3b\uff0c\u60f3\u8981\u7528\u5207\u7247\u7684\u7279\u6027\u5c31\u7528[]byte\u3002</li> <li>\u9700\u8981\u5927\u91cf\u5b57\u7b26\u4e32\u5904\u7406\u7684\u65f6\u5019\u7528[]byte\uff0c\u6027\u80fd\u597d\u5f88\u591a\u3002</li> <li>Pointer</li> </ul> <pre><code>x := 1 \np := &amp;x // p, of type *int, points to x (\u6307\u9488)\nfmt.Println(*p) // \"1\"\n*p = 2 // equivalent to x = 2 (\u6307\u5411\u53d8\u91cf\u5185\u5b58\u5730\u5740\u7684\u503c)\nfmt.Println(x) // \"2\"\n</code></pre> <ul> <li>Deferred</li> </ul> <p>\u5728\u8c03\u7528\u666e\u901a\u51fd\u6570\u6216\u65b9\u6cd5\u524d\u52a0\u4e0a\u5173\u952e\u5b57defer\uff0c\u5c31\u5b8c\u6210\u4e86defer\u6240\u9700\u8981\u7684\u8bed\u6cd5\uff0c defer\u540e\u9762\u7684\u51fd\u6570\u4f1a\u88ab\u5ef6\u8fdf\u6267\u884c\uff0c\u4e14\u4e0d\u8bba\u5305\u542bdefer\u8bed\u53e5\u7684\u51fd\u6570\u662f\u6b63\u5e38\u7ed3\u675f\uff0c\u8fd8\u662f\u5f02\u5e38\u7ed3\u675f\u3002</p> <p>\u4e00\u4e2a\u51fd\u6570\u4e2d\u6267\u884c\u591a\u6761defer\u8bed\u53e5\uff0c\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u58f0\u660e\u987a\u5e8f\u76f8\u53cd\u3002</p> <p>defer\u8bed\u53e5\u7ecf\u5e38\u88ab\u7528\u4e8e\u5904\u7406\u6210\u5bf9\u7684\u64cd\u4f5c\uff0c\u5982\u6253\u5f00\u3001\u5173\u95ed\u3001\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u52a0\u9501\u3001\u91ca\u653e\u9501\u3002\u901a\u8fc7defer\u673a\u5236\uff0c\u4e0d\u8bba\u51fd\u6570\u903b\u8f91\u591a\u590d\u6742\uff0c\u90fd\u80fd\u4fdd\u8bc1\u5728\u4efb\u4f55\u6267\u884c\u8def\u5f84\u4e0b\uff0c\u8d44\u6e90\u88ab\u91ca\u653e\u3002\u91ca\u653e\u8d44\u6e90\u7684defer\u5e94\u8be5\u76f4\u63a5\u8ddf\u5728\u8bf7\u6c42\u8d44\u6e90\u7684\u8bed\u53e5\u540e\u3002</p> <p>\u8fd8\u53ef\u7528\u4e8e\u6253\u5f00\u5173\u95ed\u6587\u4ef6\uff0c\u64cd\u4f5c\u4e92\u65a5\u9501\uff0c\u8c03\u8bd5\u590d\u6742\u7a0b\u5e8f\u662f\u7528\u4e8e\u8bb0\u5f55\u8fdb\u5165\u548c\u9000\u51fa\u51fd\u6570\u7684\u65f6\u95f4\u3002</p>"},{"location":"golang/#slice","title":"Slice","text":"<p>Slice\u7684\u5220\u9664by Index</p> <p><code>seq = append(seq[:index], seq[index+1:]...)</code></p> <p>\u63d2\u5165\uff1a</p> <pre><code>rear:=append([]string{},ss[index:]...) \u521b\u5efa\u4e34\u65f6\u5207\u7247\u4fdd\u5b58\u540e\u90e8\u5143\u7d20\nss=append(ss[0:index],\"inserted\") \u8ffd\u52a0\u5230\u524d\u5207\u7247\u5c3e\u90e8\nss=append(ss,rear...) \u5408\u5e76\n</code></pre> <ul> <li> <p>slice \u4e0d\u53ef\u6bd4\u8f83</p> </li> <li> <p>appendInt \u51fd\u6570</p> </li> </ul> <pre><code>func appendInt(x []int, y int) []int {\n    var z []int\n    zlen := len(x) + 1\n    if zlen &lt;= cap(x) {\n        // There is room to grow. Extend the slice.\n        z = x[:zlen]\n    } else {\n        // There is insufficient space. \n        // Allocate a new array.\n        // Grow by doubling.\n        zcap := zlen\n        if zcap &lt; 2*len(x) {\n            zcap = 2 * len(x)\n    }\n    z = make([]int, zlen, zcap)\n    copy(z, x) // a built-in function;\n    }\n    z[len(x)] = y\n    return z\n}\n</code></pre> <p>\u901a\u5e38\u6211\u4eec\u5e76\u4e0d\u77e5\u9053append\u8c03\u7528\u662f\u5426\u5bfc\u81f4\u4e86\u5185\u5b58\u7684\u91cd\u65b0\u5206\u914d\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u662f\u5c06append\u8fd4\u56de\u7684\u7ed3\u679c\u76f4\u63a5\u8d4b\u503c\u7ed9\u8f93\u5165\u7684slice\u53d8\u91cf\uff1arunes = append(runes, r)</p> <p>\u66f4\u65b0slice\u53d8\u91cf\u4e0d\u4ec5\u5bf9\u8c03\u7528append\u51fd\u6570\u662f\u5fc5\u8981\u7684\uff0c\u5b9e\u9645\u4e0a\u5bf9\u5e94\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u957f\u5ea6\u3001\u5bb9\u91cf\u6216\u5e95\u5c42\u6570\u7ec4\u53d8\u5316\u7684\u64cd\u4f5c\u90fd\u662f\u5fc5\u8981\u7684\u3002\u8981\u6b63\u786e\u5730\u4f7f\u7528slice\uff0c\u9700\u8981\u8bb0\u4f4f\u5c3d\u7ba1\u5e95\u5c42\u6570\u7ec4\u7684\u5143\u7d20\u662f\u95f4\u63a5\u8bbf\u95ee\u7684\uff0c\u4f46\u662fslice\u5bf9\u5e94\u7ed3\u6784\u4f53\u672c\u8eab\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u90e8\u5206\u662f\u76f4\u63a5\u8bbf\u95ee\u7684\u3002\u8981\u66f4\u65b0\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u50cf\u4e0a\u9762\u4f8b\u5b50\u90a3\u6837\u4e00\u4e2a\u663e\u5f0f\u7684\u8d4b\u503c \u64cd\u4f5c\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u770b\uff0cslice\u5e76\u4e0d\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u805a\u5408\u7c7b\u578b\u3002</p> <ul> <li>slice\u53ef\u4ee5\u7528\u6765\u6a21\u62dfstack</li> </ul> <pre><code>//\u4f7f\u7528append\u51fd\u6570\u5c06\u65b0\u7684\u503c\u538b\u5165stack\uff1a\nstack = append(stack, v) // push v\n//stack\u7684\u9876\u90e8\u4f4d\u7f6e\u5bf9\u5e94slice\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1a\ntop := stack[len(stack)-1] // top of stack\n//\u901a\u8fc7\u6536\u7f29stack\u53ef\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u5143\u7d20\nstack = stack[:len(stack)-1] // pop\n//\u8981\u5220\u9664slice\u4e2d\u95f4\u7684\u67d0\u4e2a\u5143\u7d20\u5e76\u4fdd\u5b58\u539f\u6709\u7684\u5143\u7d20\u987a\u5e8f\n//\u901a\u8fc7\u5185\u7f6e\u7684copy\u51fd\u6570\u5c06\u540e\u9762\u7684\u5b50slice\u5411\u524d\u4f9d\u6b21\u79fb\u52a8\u4e00\u4f4d\u5b8c\u6210\uff1a\nfunc remove(slice []int, i int) []int {\n    copy(slice[i:], slice[i+1:])\n    return slice[:len(slice)-1]\n}\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // \"[5 6 8 9]\"\n}\n//\u7528\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8986\u76d6\u88ab\u5220\u9664\u7684\u5143\u7d20\uff1a\nfunc remove(slice []int, i int) []int {\n    slice[i] = slice[len(slice)-1]\n    return slice[:len(slice)-1]\n}\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // \"[5 6 9 8]\n}\n</code></pre> <ul> <li>\u6a21\u62df\u961f\u5217</li> </ul> <pre><code>// \u521b\u5efa\u961f\u5217\nqueue := make([]int,0)\n// enqueue\u5165\u961f\nqueue=append(queue,10)\n// dequeue\u51fa\u961f\nv := queue[0]\nqueue = queue[1:]\n// \u957f\u5ea60\u4e3a\u7a7a\nlen(queue)==0\n</code></pre>"},{"location":"golang/#hashmap","title":"Hashmap","text":"<pre><code>// \u521b\u5efa\nmap := make(map[string]int)\nmap := map[string]int{}\n// \u8bbe\u7f6ekv\nmap[\"key\"] = 1\n// \u5220\u9664k \u5931\u8d25\u8fd40\ndelete(map,\"key\")\n// \u904d\u5386\nfor k,v := range map{\n    println(k,v)\n}\n</code></pre> <ul> <li>map \u5143\u7d20\u4e0d\u80fd\u53d6\u5740\u64cd\u4f5c\uff0c\u539f\u56e0\u662fmap\u53ef\u80fd\u968f\u7740\u5143\u7d20\u6570\u91cf\u7684\u589e\u957f\u800c\u91cd\u65b0\u5206\u914d\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4ece\u800c\u53ef\u80fd\u5bfc\u81f4\u4e4b\u524d\u7684\u5730\u5740\u65e0\u6548</li> <li>map \u952e\u9700\u8981\u53ef\u6bd4\u8f83\uff0c\u4e0d\u80fd\u4e3a slice\u3001map\u3001function</li> <li>map \u503c\u90fd\u6709\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u76f4\u63a5\u64cd\u4f5c\u9ed8\u8ba4\u503c\uff0c\u5982\uff1am[age]++ \u503c\u7531 0 \u53d8\u4e3a 1</li> <li>\u6bd4\u8f83\u4e24\u4e2a map \u9700\u8981\u904d\u5386\uff0c\u5176\u4e2d\u7684 kv \u662f\u5426\u76f8\u540c\uff0c\u56e0\u4e3a\u6709\u9ed8\u8ba4\u503c\u5173\u7cfb\uff0c\u6240\u4ee5\u9700\u8981\u68c0\u67e5 val \u548c ok \u4e24\u4e2a\u503c</li> </ul>"},{"location":"golang/#struct","title":"Struct","text":"<ul> <li>\u901a\u8fc7\u70b9\u64cd\u4f5c\u7b26\u8bbf\u95ee, \u6216\u8005\u662f\u5bf9\u6210\u5458\u53d6\u5730\u5740\uff0c\u7136\u540e\u901a\u8fc7\u6307\u9488\u8bbf\u95ee</li> <li>\u7ed3\u6784\u4f53\u6210\u5458\u7684\u8f93\u5165\u987a\u5e8f\u4e5f\u6709\u91cd\u8981\u7684\u610f\u4e49</li> <li>\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5c31\u662f\u5bfc\u51fa</li> <li>\u4e00\u4e2a\u547d\u540d\u4e3aS\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u5c06\u4e0d\u80fd\u518d\u5305\u542bS\u7c7b\u578b\u7684\u6210\u5458\uff08\u8be5\u9650\u5236\u540c\u6837\u9002\u5e94\u4e8e\u6570\u7ec4\u3002\uff09\u4f46\u662fS\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b*S\u6307\u9488\u7c7b\u578b\u7684\u6210\u5458</li> <li>\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5e76\u8fd4\u56de\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff1a<code>pp := &amp;Point{1, 2}</code></li> <li>\u7ed3\u6784\u4f53\u7684\u5168\u90e8\u6210\u5458\u90fd\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u7ed3\u6784\u4f53\u4e5f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c== \u4f1a\u6bd4\u8f83\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u4e2a\u6210\u5458</li> </ul>"},{"location":"golang/#marshaling","title":"Marshaling","text":"<pre><code>data, err := json.Marshal(movies)\ndata, err := json.MarshalIndent(movies, \"\", \" \") //\u5e26\u7f29\u8fdb\nif err != nil {\n    log.Fatalf(\"JSON marshaling failed: %s\", err)\n}\nfmt.Printf(\"%s\\n\", data)\n</code></pre>"},{"location":"golang/#garbage-collection","title":"Garbage collection","text":"<p>Go\u8bed\u8a00\u7684\u81ea\u52a8\u5783\u573e\u6536\u96c6\u5668\u4ece\u6bcf\u4e2a\u5305\u7ea7\u7684\u53d8\u91cf\u548c\u6bcf\u4e2a\u5f53\u524d\u8fd0\u884c\u51fd\u6570\u7684\u6bcf\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5f00\u59cb\uff0c\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u7684\u8bbf\u95ee\u8def\u5f84\u904d\u5386\uff0c\u662f\u5426\u53ef\u4ee5\u627e\u5230\u8be5\u53d8\u91cf\u3002\u5982\u679c\u4e0d\u53ef\u8fbe -&gt; \u56de\u6536</p> <p>\u6ce8\u610f\uff1a\u5982\u679c\u5c06\u6307\u5411\u77ed\u751f\u547d\u5468\u671f\u5bf9\u8c61\u7684\u6307\u9488\u4fdd\u5b58\u5230\u5177\u6709\u957f\u751f\u547d\u5468\u671f\u7684\u5bf9\u8c61\u4e2d\uff0c\u7279\u522b\u662f\u4fdd\u5b58\u5230\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u4f1a\u963b\u6b62\u5bf9\u77ed\u751f\u547d\u5468\u671f\u5bf9\u8c61\u7684\u5783\u573e\u56de\u6536\uff08\u4ece\u800c\u53ef\u80fd\u5f71\u54cd\u7a0b\u5e8f\u7684\u6027\u80fd\uff09\u3002</p> <p>\u6d41\u7a0b\u56fe\uff1a</p> <p></p> <p>\u91cd\u70b9\u6982\u5ff5\uff1a</p> <ul> <li>\u5199\u5c4f\u969c</li> <li> <p>gray black white\u4e09\u8272\u6807\u8bb0</p> </li> <li> <p>\u9ed1\u8272: \u5bf9\u8c61\u5728\u8fd9\u6b21GC\u4e2d\u5df2\u6807\u8bb0,\u4e14\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u7684\u5b50\u5bf9\u8c61\u4e5f\u5df2\u6807\u8bb0</p> </li> <li>\u7070\u8272: \u5bf9\u8c61\u5728\u8fd9\u6b21GC\u4e2d\u5df2\u6807\u8bb0, \u4f46\u8fd9\u4e2a\u5bf9\u8c61\u5305\u542b\u7684\u5b50\u5bf9\u8c61\u672a\u6807\u8bb0</li> <li> <p>\u767d\u8272: \u5bf9\u8c61\u5728\u8fd9\u6b21GC\u4e2d\u672a\u6807\u8bb0</p> </li> <li> <p>gc-root \u53ef\u8fbe\u6027\u5206\u6790</p> </li> <li> <p>\u5e76\u884c\u7684\u6807\u8bb0/\u626b\u63cf</p> </li> <li> <p>STW \u505c\u6b62\u4e16\u754c\uff08\u6682\u505c\u7528\u6237\u534f\u7a0b\uff09/\u542f\u52a8\u7528\u6237\u534f\u7a0b</p> </li> </ul>"},{"location":"golang/#exception-handing","title":"Exception handing","text":"<ul> <li>Go\u4f7f\u7528\u63a7\u5236\u6d41\u673a\u5236\uff08\u5982if\u548creturn\uff09\u5904\u7406\u5f02\u5e38</li> <li>\u9519\u8bef\u5904\u7406\u7b56\u7565: \u5411\u4e0a\u4f20\u64ad/\u91cd\u8bd5/\u8f93\u51fa\u5e76\u7ed3\u675f/\u8f93\u51fa\u4e0d\u4e2d\u65ad/\u5ffd\u7565</li> </ul>"},{"location":"golang/#go-routine","title":"Go routine","text":"<p>Go\u8bed\u8a00\u901a\u8fc7goroutine\u63d0\u4f9b\u4e86\u5bf9\u4e8e\u5e76\u53d1\u7f16\u7a0b\u7684\u6700\u6e05\u6670\u6700\u76f4\u63a5\u7684\u652f\u6301\uff0cGo routine \u7279\u6027\u5c0f\u7ed3\uff1a</p> <ol> <li> <p>goroutine\u662fGo\u8bed\u8a00\u8fd0\u884c\u5e93\u7684\u529f\u80fd\uff0c\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u529f\u80fd\uff0cgo routine\u4e0d\u662f\u7528\u7ebf\u7a0b\u5b9e\u73b0\u7684\u3002\u5177\u4f53\u53ef\u53c2\u89c1Go\u8bed\u8a00\u6e90\u7801\u91cc\u7684pkg/runtime/proc.c</p> </li> <li> <p>go routine\u5c31\u662f\u4e00\u6bb5\u4ee3\u7801\uff0c\u4e00\u4e2a\u51fd\u6570\u5165\u53e3\uff0c\u4ee5\u53ca\u5728\u5806\u4e0a\u4e3a\u5176\u5206\u914d\u7684\u4e00\u4e2a\u5806\u6808\u3002\u6240\u4ee5\u5b83\u975e\u5e38\u5ec9\u4ef7\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u521b\u5efa\u4e0a\u4e07\u4e2agoroutine\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6240\u8c03\u5ea6\u6267\u884c</p> </li> <li> <p>\u9664\u4e86\u88ab\u7cfb\u7edf\u8c03\u7528\u963b\u585e\u7684\u7ebf\u7a0b\u5916\uff0cGo\u8fd0\u884c\u5e93\u6700\u591a\u4f1a\u542f\u52a8$GOMAXPROCS\u4e2a\u7ebf\u7a0b\u6765\u8fd0\u884cgoroutine</p> </li> <li> <p>go routine\u662f\u534f\u4f5c\u5f0f\u8c03\u5ea6\u7684\uff0c\u5982\u679cgo routine\u4f1a\u6267\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u800c\u4e14\u4e0d\u662f\u901a\u8fc7\u7b49\u5f85\u8bfb\u53d6\u6216\u5199\u5165channel\u7684\u6570\u636e\u6765\u540c\u6b65\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u4e3b\u52a8\u8c03\u7528Go sched()\u6765\u8ba9\u51faCPU</p> </li> <li> <p>\u548c\u6240\u6709\u5176\u4ed6\u5e76\u53d1\u6846\u67b6\u91cc\u7684\u534f\u7a0b\u4e00\u6837\uff0cgo routine\u91cc\u6240\u8c13\u201c\u65e0\u9501\u201d\u7684\u4f18\u70b9\u53ea\u5728\u5355\u7ebf\u7a0b\u4e0b\u6709\u6548\uff0c\u5982\u679c$GOMAXPROCS &gt; 1\u5e76\u4e14\u534f\u7a0b\u95f4\u9700\u8981\u901a\u4fe1\uff0cGo\u8fd0\u884c\u5e93\u4f1a\u8d1f\u8d23\u52a0\u9501\u4fdd\u62a4\u6570\u636e\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48sieve.go\u8fd9\u6837\u7684\u4f8b\u5b50\u5728\u591aCPU\u591a\u7ebf\u7a0b\u65f6\u53cd\u800c\u66f4\u6162\u7684\u539f\u56e0</p> </li> <li> <p>Web\u7b49\u670d\u52a1\u7aef\u7a0b\u5e8f\u8981\u5904\u7406\u7684\u8bf7\u6c42\u4ece\u672c\u8d28\u4e0a\u6765\u8bb2\u662f\u5e76\u884c\u5904\u7406\u7684\u95ee\u9898\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u57fa\u672c\u72ec\u7acb\uff0c\u4e92\u4e0d\u4f9d\u8d56\uff0c\u51e0\u4e4e\u6ca1\u6709\u6570\u636e\u4ea4\u4e92\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5e76\u53d1\u7f16\u7a0b\u7684\u6a21\u578b\uff0c\u800c\u5e76\u53d1\u7f16\u7a0b\u6846\u67b6\u53ea\u662f\u89e3\u51b3\u4e86\u5176\u8bed\u4e49\u8868\u8ff0\u7684\u590d\u6742\u6027\uff0c\u5e76\u4e0d\u662f\u4ece\u6839\u672c\u4e0a\u63d0\u9ad8\u5904\u7406\u7684\u6548\u7387\uff0c\u4e5f\u8bb8\u662f\u5e76\u53d1\u8fde\u63a5\u548c\u5e76\u53d1\u7f16\u7a0b\u7684\u82f1\u6587\u90fd\u662fconcurrent\u5427\uff0c\u5f88\u5bb9\u6613\u4ea7\u751f\u201c\u5e76\u53d1\u7f16\u7a0b\u6846\u67b6\u548ccoroutine\u53ef\u4ee5\u9ad8\u6548\u5904\u7406\u5927\u91cf\u5e76\u53d1\u8fde\u63a5\u201d\u7684\u8bef\u89e3\u3002</p> </li> <li> <p>Go\u8bed\u8a00\u8fd0\u884c\u5e93\u5c01\u88c5\u4e86\u5f02\u6b65IO\uff0c\u6240\u4ee5\u53ef\u4ee5\u5199\u51fa\u8c8c\u4f3c\u5e76\u53d1\u6570\u5f88\u591a\u7684\u670d\u52a1\u7aef\uff0c\u53ef\u5373\u4f7f\u6211\u4eec\u901a\u8fc7\u8c03\u6574$GOMAXPROCS\u6765\u5145\u5206\u5229\u7528\u591a\u6838CPU\u5e76\u884c\u5904\u7406\uff0c\u5176\u6548\u7387\u4e5f\u4e0d\u5982\u6211\u4eec\u5229\u7528IO\u4e8b\u4ef6\u9a71\u52a8\u8bbe\u8ba1\u7684\u3001\u6309\u7167\u4e8b\u52a1\u7c7b\u578b\u5212\u5206\u597d\u5408\u9002\u6bd4\u4f8b\u7684\u7ebf\u7a0b\u6c60\u3002\u5728\u54cd\u5e94\u65f6\u95f4\u4e0a\uff0c\u534f\u4f5c\u5f0f\u8c03\u5ea6\u662f\u786c\u4f24\u3002</p> </li> <li> <p>Go routine\u6700\u5927\u7684\u4ef7\u503c\u662f\u5176\u5b9e\u73b0\u4e86\u5e76\u53d1\u534f\u7a0b\u548c\u5b9e\u9645\u5e76\u884c\u6267\u884c\u7684\u7ebf\u7a0b\u7684\u6620\u5c04\u4ee5\u53ca\u52a8\u6001\u6269\u5c55\uff0c\u968f\u7740\u5176\u8fd0\u884c\u5e93\u7684\u4e0d\u65ad\u53d1\u5c55\u548c\u5b8c\u5584\uff0c\u5176\u6027\u80fd\u4e00\u5b9a\u4f1a\u8d8a\u6765\u8d8a\u597d\uff0c\u5c24\u5176\u662f\u5728CPU\u6838\u6570\u8d8a\u6765\u8d8a\u591a\u7684\u672a\u6765\uff0c\u7ec8\u6709\u4e00\u5929\u6211\u4eec\u4f1a\u4e3a\u4e86\u4ee3\u7801\u7684\u7b80\u6d01\u548c\u53ef\u7ef4\u62a4\u6027\u800c\u653e\u5f03\u90a3\u4e00\u70b9\u70b9\u6027\u80fd\u7684\u5dee\u522b\u3002</p> </li> <li> <p>Channels</p> </li> </ol> <pre><code>ch := make(chan int) // ch has type 'chan int'\nch = make(chan int)    // unbuffered channel\nch = make(chan int, 0) // unbuffered channel\nch = make(chan int, 3) // buffered channel with capacity 3\n\nch &lt;- x  // a send statement\nx = &lt;-ch // a receive expression in an assignment statement\n&lt;-ch     // a receive statement; result is discarded\n\nclose(ch) // close a channel, panic if still sending\n</code></pre> <ol> <li>channels \u662fGoroutine \u4e4b\u95f4\u4f20\u9012\u6d88\u606f\u7684\u901a\u4fe1\u673a\u5236\uff0c channels\u90fd\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\u578b\uff0c\u4e5f\u5c31\u662fchannels\u53ef\u53d1\u9001\u6570\u636e\u7684\u7c7b\u578b\u3002</li> <li>\u521b\u5efachannel <code>ch := make(chan int)</code>\u3002</li> <li>\u548cmap \u4e00\u6837\uff0c channels\u4e5f\u5bf9\u5e94\u4e00\u4e2amake\u521b\u5efa\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u7684\u5f15\u7528\u3002</li> <li>channels \u53ef\u4ee5\u7528==\u6765\u6bd4\u8f83\uff0c\u5982\u679c\u5f15\u7528\u76f8\u540c\u5bf9\u8c61\u90a3\u6bd4\u8f83\u7ed3\u679c\u4e3a\u771f\u3002</li> <li>\u4e0d\u5e26\u7f13\u5b58\u7684channels \u7684\u53d1\u9001/\u63a5\u53d7\u64cd\u4f5c\u4f1a\u4f7f\u81ea\u5df1\u963b\u585e\u76f4\u5230\u53e6\u4e00\u4e2agoroutine\u88ab\u63a5\u53d7/\u5df2\u53d1\u9001, \u6240\u4ee5\u53c8\u53eb\u540c\u6b65channels</li> <li>\u5e26\u7f13\u5b58\u7684channels \u5185\u90e8\u6709\u4e00\u4e2a\u5143\u7d20\u961f\u5217\uff0c \u53d1\u9001\u64cd\u4f5c\u5c31\u662f\u5411\u5185\u90e8\u7f13\u5b58\u961f\u5217\u7684\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\uff0c\u63a5\u6536\u64cd\u4f5c\u5219\u662f\u4ece\u961f\u5217\u7684\u5934\u90e8\u5220\u9664\u5143\u7d20\u3002 \u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u90a3\u4e48\u5c31\u4f1a\u50cf\u65e0\u7f13\u5b58channels\u4e00\u6837\u963b\u585e\u3002</li> <li>\u591a\u4e2agoroutines\u5e76\u53d1\u5730\u5411\u540c\u4e00\u4e2achannel\u53d1\u9001\u6570\u636e\uff0c\u6216\u4ece\u540c\u4e00\u4e2achannel\u63a5\u6536\u6570\u636e\u65f6\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e86\u65e0\u7f13\u5b58\u7684channel\uff0c\u90a3\u4e48\u6162\u7684goroutines\u5c06\u4f1a\u56e0\u4e3a\u6ca1\u6709\u4eba\u63a5\u6536\u800c\u88ab\u6c38\u8fdc\u5361\u4f4f\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u79f0\u4e3agoroutines\u6cc4\u6f0f\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2aBUG\u3002\u548c\u5783\u573e\u53d8\u91cf\u4e0d\u540c\uff0c\u6cc4\u6f0f\u7684goroutines\u5e76\u4e0d\u4f1a\u88ab\u81ea\u52a8\u56de\u6536\uff0c\u56e0\u6b64\u786e\u4fdd\u6bcf\u4e2a\u4e0d\u518d\u9700\u8981\u7684goroutine\u80fd\u6b63\u5e38\u9000\u51fa\u662f\u91cd\u8981\u7684\u3002</li> <li> <p>sync.WaitGroup\u53ef\u4ee5\u7528\u6765\u8ba1\u6570\u6d3b\u8dc3\u7684goroutine</p> </li> <li> <p>\u57fa\u4e8eselect\u7684\u591a\u8def\u590d\u7528</p> </li> <li> <p>Goroutine\u7684\u9000\u51fa</p> </li> </ol> <p>\u7528\u5173\u95ed\u4e00\u4e2achannel\u6765\u8fdb\u884c\u5e7f\u64ad</p> <pre><code>var done = make(chan struct{})\n\nfunc cancelled() bool {\n  select {\n  case &lt;-done:\n      return true\n  default:\n      return false\n  }\n}\n\n// Cancel traversal when input is detected.\ngo func() {\n  os.Stdin.Read(make([]byte, 1)) // read a single byte\n  close(done)\n}()\nfor {\n  select {\n  case &lt;-done:\n      // Drain fileSizes to allow existing goroutines to finish.\n      for range fileSizes {\n          // Do nothing.\n      }\n      return\n  case size, ok := &lt;-fileSizes:\n      // ...\n  }\n}\n//\u8f6e\u8be2\u53d6\u6d88\u72b6\u6001\nfunc walkDir(dir string, n *sync.WaitGroup, fileSizes chan&lt;- int64) {\n  defer n.Done()\n  if cancelled() {\n      return\n  }\n  for _, entry := range dirents(dir) {\n      // ...\n  }\n}\n</code></pre> <ul> <li>sync.Mutex\u4e92\u65a5\u9501</li> </ul> <p>\u5728Lock\u548cUnlock\u4e4b\u95f4\u7684\u4ee3\u7801\u6bb5\u4e2d\u7684\u5185\u5bb9goroutine\u53ef\u4ee5\u968f\u4fbf\u8bfb\u53d6\u6216\u8005\u4fee\u6539\uff0c\u8fd9\u4e2a\u4ee3\u7801\u6bb5\u53eb\u505a\u4e34\u754c\u533a\u3002</p> <pre><code>func Balance() int {\n    mu.Lock()\n    defer mu.Unlock()\n    return balance\n}\n</code></pre> <ul> <li>sync.RWMutex\u8bfb\u5199\u9501</li> </ul> <p>\u8bfb\u64cd\u4f5c\u5e76\u884c\u6267\u884c\uff0c\u4f46\u5199\u64cd\u4f5c\u4f1a\u5b8c\u5168\u4e92\u65a5\u3002\u8fd9\u79cd\u9501\u53eb\u4f5c\u201c\u591a\u8bfb\u5355\u5199\u201d\u9501\uff08multiple readers, single writer lock\uff09, RLock\u53ea\u80fd\u5728\u4e34\u754c\u533a\u5171\u4eab\u53d8\u91cf\u6ca1\u6709\u4efb\u4f55\u5199\u5165\u64cd\u4f5c\u65f6\u53ef\u7528\u3002</p> <pre><code>var mu sync.RWMutex\nvar balance int\nfunc Balance() int {\n    mu.RLock() // readers lock\n    defer mu.RUnlock()\n    return balance\n}\n</code></pre> <p>RWMutex\u53ea\u6709\u5f53\u83b7\u5f97\u9501\u7684\u5927\u90e8\u5206goroutine\u90fd\u662f\u8bfb\u64cd\u4f5c\uff0c\u800c\u9501\u5728\u7ade\u4e89\u6761\u4ef6\u4e0b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cgoroutine\u4eec\u5fc5\u987b\u7b49\u5f85\u624d\u80fd\u83b7\u53d6\u5230\u9501\u7684\u65f6\u5019\uff0cRWMutex\u624d\u662f\u6700\u80fd\u5e26\u6765\u597d\u5904\u7684\u3002</p>"},{"location":"golang/#go-scheduler","title":"Go scheduler","text":"<p>\u534f\u7a0b:</p> <p>\u534f\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\u3002\u534f\u7a0b\u8c03\u5ea6\u5207\u6362\u65f6\uff0c\u5c06\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\u4fdd\u5b58\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u5728\u5207\u56de\u6765\u7684\u65f6\u5019\uff0c\u6062\u590d\u5148\u524d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u4e0a\u4e0b\u6587\u548c\u6808\u3002 \u56e0\u6b64\uff0c\u534f\u7a0b\u80fd\u4fdd\u7559\u4e0a\u4e00\u6b21\u8c03\u7528\u65f6\u7684\u72b6\u6001\uff08\u5373\u6240\u6709\u5c40\u90e8\u72b6\u6001\u7684\u4e00\u4e2a\u7279\u5b9a\u7ec4\u5408\uff09\uff0c\u6bcf\u6b21\u8fc7\u7a0b\u91cd\u5165\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u8fdb\u5165\u4e0a\u4e00\u6b21\u8c03\u7528\u7684\u72b6\u6001\uff0c\u6362\u79cd\u8bf4\u6cd5\uff1a\u8fdb\u5165\u4e0a\u4e00\u6b21\u79bb\u5f00\u65f6\u6240\u5904\u903b\u8f91\u6d41\u7684\u4f4d\u7f6e\u3002 \u7ebf\u7a0b\u548c\u8fdb\u7a0b\u7684\u64cd\u4f5c\u662f\u7531\u7a0b\u5e8f\u89e6\u53d1\u7cfb\u7edf\u63a5\u53e3\uff0c\u6700\u540e\u7684\u6267\u884c\u8005\u662f\u7cfb\u7edf\uff1b\u534f\u7a0b\u7684\u64cd\u4f5c\u6267\u884c\u8005\u5219\u662f\u7528\u6237\u81ea\u8eab\u7a0b\u5e8f\uff0cgoroutine\u4e5f\u662f\u534f\u7a0b\u3002</p> <p>groutine\u80fd\u62e5\u6709\u5f3a\u5927\u7684\u5e76\u53d1\u5b9e\u73b0\u662f\u901a\u8fc7MPG\u8c03\u5ea6\u6a21\u578b**\u5b9e\u73b0.</p> <p>Go\u7684\u8c03\u5ea6\u5668\u5185\u90e8\u6709\u56db\u4e2a\u91cd\u8981\u7684\u7ed3\u6784\uff1aM\uff0cP\uff0cG\uff0cSched.</p> <p>M: M\u4ee3\u8868\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u4e00\u4e2aM\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\uff0cgoroutine\u5c31\u662f\u8dd1\u5728M\u4e4b\u4e0a\u7684\uff1bM\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u7ed3\u6784\uff0c\u91cc\u9762\u7ef4\u62a4\u5c0f\u5bf9\u8c61\u5185\u5b58cache\uff08mcache\uff09\u3001\u5f53\u524d\u6267\u884c\u7684goroutine\u3001\u968f\u673a\u6570\u53d1\u751f\u5668\u7b49\u7b49\u975e\u5e38\u591a\u7684\u4fe1\u606f</p> <p>P: P\u5168\u79f0\u662fProcessor\uff0c\u5904\u7406\u5668\uff0c\u5b83\u7684\u4e3b\u8981\u7528\u9014\u5c31\u662f\u7528\u6765\u6267\u884cgoroutine\u7684\uff0c\u6240\u4ee5\u5b83\u4e5f\u7ef4\u62a4\u4e86\u4e00\u4e2agoroutine\u961f\u5217\uff0c\u91cc\u9762\u5b58\u50a8\u4e86\u6240\u6709\u9700\u8981\u5b83\u6765\u6267\u884c\u7684goroutine, P\u7528\u4e8e\u8c03\u5ea6\u7684\u4e0a\u4e0b\u6587\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u770b\u6210\u4e00\u4e2a\u672c\u5730\u5316\u7248\u672c\u7684\u8c03\u5ea6\u5668.</p> <p>G: \u4ee3\u8868\u4e00\u4e2agoroutine\uff0c\u5b83\u6709\u81ea\u5df1\u7684\u6808\uff0cinstruction pointer\u548c\u5176\u4ed6\u4fe1\u606f\uff08\u6b63\u5728\u7b49\u5f85\u7684channel\u7b49\u7b49\uff09\uff0c\u7528\u4e8e\u8c03\u5ea6\u3002</p> <p>Sched\uff1a\u4ee3\u8868\u8c03\u5ea6\u5668\uff0c\u5b83\u7ef4\u62a4\u6709\u5b58\u50a8M\u548cG\u7684\u961f\u5217\u4ee5\u53ca\u8c03\u5ea6\u5668\u7684\u4e00\u4e9b\u72b6\u6001\u4fe1\u606f\u7b49\u3002</p> <p>\u8c03\u5ea6\u5b9e\u73b0:</p> <p>\u67092\u4e2a\u7269\u7406\u7ebf\u7a0bM\uff0c\u6bcf\u4e00\u4e2aM\u90fd\u62e5\u6709\u4e00\u4e2a\u5904\u7406\u5668P\uff0c\u6bcf\u4e00\u4e2aP\u4e5f\u90fd\u6709\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684goroutine\u3002P\u7684\u6570\u91cf\u53ef\u4ee5\u901a\u8fc7GOMAXPROCS()\u6765\u8bbe\u7f6e\uff0c\u5b83\u5176\u5b9e\u4e5f\u5c31\u4ee3\u8868\u4e86\u771f\u6b63\u7684\u5e76\u53d1\u5ea6\uff0c\u5373\u6709\u591a\u5c11\u4e2agoroutine\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u3002</p> <p>M\u4f1a\u548c\u4e00\u4e2a\u7cfb\u7edf\u5185\u6838\u7ebf\u7a0b\u7ed1\u5b9a\uff0c\u800cP\u548cG\u7684\u5173\u7cfb\u662f\u4e00\u5bf9\u591a\uff0cM\u4e0eP, P\u4e0eG\u7684\u5173\u7cfb\u90fd\u662f\u52a8\u6001\u53ef\u53d8\u7684\u3002</p> <p>\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c M\u4e0eP\u7684\u7ec4\u5408\u624d\u80fd\u4e3aG\u63d0\u4f9b\u8fd0\u884c\u73af\u5883\uff0c\u591a\u4e2a\u53ef\u6267\u884c\u7684G\u4f1a\u6302\u5728\u67d0\u4e2aP\u4e0a\u7b49\u5f85\u8c03\u5ea6\u548c\u6267\u884c\uff0cP\u7531\u7a0b\u5e8f\u51b3\u5b9a\uff0cM\u7531Go\u8bed\u8a00\u521b\u5efa\u3002</p> <p>M\u548cP\u4f1a\u9002\u65f6\u7ec4\u5408\u4e0e\u65ad\u5f00\uff0c\u5047\u5982\u67d0\u4e2aG\u963b\u585e\u4e86M\uff0cP\u5c31\u4f1a\u643a\u7b49\u5f85\u6267\u884c\u7684G\u961f\u5217\u8f6c\u6295\u65b0M.</p>"},{"location":"golang/#go-oo","title":"Go \u7684\u9762\u5bf9\u5bf9\u8c61OO","text":"<p>Golang \u662f\u5426\u662f\u4e00\u4e2a\u9762\u5bf9\u5bf9\u8c61\u8bed\u8a00\uff1f</p> <p>Yes and no. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy. The concept of \u201cinterface\u201d in Go provides a different approach that we believe is easy to use and in some ways more general. There are also ways to embed types in other types to provide something analogous \u2014 but not identical \u2014 to subclassing. Moreover, methods in Go are more general than in C++ or Java: they can be defined for any sort of data, even built-in types such as plain, \u201cunboxed\u201d integers. They are not restricted to structs (classes).</p> <p>Also, the lack of a type hierarchy makes \u201cobjects\u201d in Go feel much more lightweight than in languages such as C++ or Java.</p> <p>\u7528Go \u5b9e\u73b0\u9762\u5bf9\u5bf9\u5bf9\u8c61</p> <p>\u5c01\u88c5\uff1a \u7528\u9996\u5b57\u6bcd\u5927\u5c0f\u5199\u6765\u63a7\u5236\u5c5e\u6027\u8bbf\u95ee\u6743\u9650</p> <pre><code>Example:\ntype Animal struct {\n  name string\n}\n\nfunc NewAnimal() *Animal {\n  return &amp;Animal{}\n}\n\nfunc (p *Animal) SetName(name string) {\n  p.name = name\n}\n\nfunc (p *Animal) GetName() string {\n  return p.name\n}\n</code></pre> <p>\u7ee7\u627f\uff1aGo\u7528\u7ed3\u6784\u4f53\u7ec4\u5408\u7684\u65b9\u5f0f\u5b9e\u73b0</p> <pre><code>type Animal struct {\n    Name string\n}\n\ntype Cat struct {\n  Animal\n  FeatureA string\n}\n\ntype Dog struct {\n  Animal\n  FeatureB string\n}\n\n//Cat, Dog \u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8c03\u7528Animal\u7ed3\u6784\u4f53\npet := NewAnimal()\npet.SetName(\"\u79cb\u7530\u72ac\")\n\ndog := Dog{Animal: *pet}\nfmt.Println(dog.GetName) //prints \u79cb\u7530\u72ac\n\n</code></pre> <p>\u591a\u6001\uff1aGo\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0</p> <pre><code>type Animal interface{\n  Say() //\u53ea\u8981\u662f\u62e5\u6709\u8fd9\u4e2a\u51fd\u6570\u7684\u7ed3\u6784\u4f53\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u63a5\u53e3\u6765\u63a5\u6536\n}\n\nfunc (c *Cat) Say() {\n  fmt.Println(\"meow\")\n}\n\nfunc (d *Dog) Say() {\n      fmt.Println(\"woof\")\n}\n\nfunc main() {\n  var a Animal\n    a = Dog{} //woof\n    a.Say()\n    a = Cat{}   //meow\n    a.Say()\n}\n</code></pre> <p>\u603b\u7ed3\uff1a</p> <p>Golang\u4e2d\u7684\u63a5\u53e3\u8bbe\u8ba1\u89e3\u8026\u4e86\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u589e\u52a0\u4e86\u7f16\u7801\u7684\u7075\u6d3b\u5ea6\uff0c\u89e3\u51b3\u4e86\u4f9b\u9700\u5173\u7cfb\u98a0\u5012\u7684\u95ee\u9898\u3002\u4f46\u662f\u7531\u4e8e\u6ca1\u4e86\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u7684\u5f3a\u7ed1\u5b9a\uff0c\u5176\u5b9e\u4e5f\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u589e\u52a0\u4e86\u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u6210\u672c\u3002</p>"},{"location":"golang/#golang","title":"Golang \u89c4\u8303\u4e0e\u6ce8\u610f","text":"<ul> <li>Golang\u4e3b\u7a0b\u5e8f\u5fc5\u987b\u8981\u7b49\u5f85\u6240\u6709\u7684Goroutine\u7ed3\u675f\u624d\u80fd\u591f\u9000\u51fa\uff0c\u5426\u5219\u5982\u679c\u5148\u9000\u51fa\u4e3b\u7a0b\u5e8f\u4f1a\u5bfc\u81f4\u6240\u6709\u7684Goroutine\u53ef\u80fd\u672a\u6267\u884c\u7ed3\u675f\u5c31\u9000\u51fa\u4e86\uff0c \u7528WaitGroup.</li> <li>\u6bcf\u4e2aGoroutine\u90fd\u8981\u6709recover\u673a\u5236\uff0c\u56e0\u4e3a\u5f53\u4e00\u4e2aGoroutine\u629bpanic\u7684\u65f6\u5019\u53ea\u6709\u81ea\u8eab\u80fd\u591f\u6355\u6349\u5230\u5176\u5b83Goroutine\u662f\u6ca1\u6709\u529e\u6cd5\u6355\u6349\u7684, \u5982\u679c\u6ca1\u6709recover\u673a\u5236\uff0c\u6574\u4e2a\u8fdb\u7a0b\u4f1acrash\u3002</li> <li>Recover\u53ea\u80fd\u5728defer\u91cc\u9762\u751f\u6548\uff0c\u5982\u679c\u4e0d\u662f\u5728defer\u91cc\u8c03\u7528\uff0c\u4f1a\u76f4\u63a5\u8fd4\u56denil\u3002</li> <li>Goroutine\u53d1\u751fpanic\u65f6\uff0c\u53ea\u4f1a\u8c03\u7528\u81ea\u8eab\u7684defer\uff0c\u6240\u4ee5\u5373\u4fbf\u4e3bGoroutine\u91cc\u5199\u4e86recover\u903b\u8f91\uff0c\u4e5f\u65e0\u6cd5recover\u3002</li> </ul> <pre><code>package main\n\nimport (\n    \"sync\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc calc(w *sync.WaitGroup, i int)  {\n    defer func() {\n        err := recover()\n        if err != nil {\n          fmt.Println(\"panic error.\")\n        }\n    }()\n\n    fmt.Println(\"calc: \", i)\n    time.Sleep(time.Second)\n    w.Done()\n}\n\nfunc main()  {\n    # WaitGroup\u80fd\u591f\u4e00\u76f4\u7b49\u5230\u6240\u6709\u7684goroutine\u6267\u884c\u5b8c\u6210\uff0c\u5e76\u4e14\u963b\u585e\u4e3b\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u76f4\u5230\u6240\u6709\u7684goroutine\u6267\u884c\u5b8c\u6210\u3002\n    wg := sync.WaitGroup{}    \n    for i:=0; i&lt;10; i++ {\n        wg.Add(1)\n        go calc(&amp;wg, i)\n    }\n    # \u963b\u585e\u4e3b\u7ebf\u7a0b\u7b49\u5230\u6240\u6709\u7684goroutine\u6267\u884c\u5b8c\u6210\n    wg.Wait()\n    fmt.Println(\"all goroutine finish\")\n}\n</code></pre> <ul> <li>\u4f7f\u7528 http.Client\uff0c\u5982\u679c\u6ca1\u6709 <code>resp.Body.Close()</code>\uff0c\u53ef\u80fd\u5bfc\u81f4 goroutine \u6cc4\u9732\u3002</li> <li>Slice -&gt; reslice \u7684\u5730\u5740\u5f15\u7528\u95ee\u9898\u3002</li> <li>\u8fd8\u6709\u5f88\u591a\u53ef\u4ee5\u67e5\u9605 50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</li> </ul>"}]}